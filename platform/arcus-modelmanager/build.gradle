/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// project specific build settings, dependencies, etc.
apply from: file("${rootDir}/gradle/subproject.gradle")
apply from: file("${rootDir}/gradle/application.gradle")

mainClassName = "com.iris.modelmanager.ModelManager"
applicationName = "modelmanager"

// XXX: this is duplicated from gradle/application.gradle. How to fix?
def getLocalProps() {
   def localPropsMap = new HashMap()
   def localPropsHome = System.env['LOCAL_PROPS_HOME']
   if (localPropsHome != null) {
      def localPropsPath = localPropsHome + '/' + project.name + '.properties'
      if (file(localPropsPath).exists()) {
         def localProps = new Properties()
         file(localPropsPath).withInputStream { localProps.load(it) }
         localProps.each { key, value -> localPropsMap.put(key, value) }
      }
   }
   return localPropsMap
}


distZip.enabled = false
ext.dockerGroup = 'arcus'
ext.containerTag = "${project.dockerGroup}/${project.applicationName}"

def schemas = [ "platform", "video", "history" ]

dependencies {

    compile project (':platform:arcus-lib')
	
    compile libraries.cassandraDriver
    compile libraries.commonsCodec
    compile libraries.commons_lang
    compile libraries.commonsIO
    compile libraries.jcommander
    compile libraries.gson

    // TODO:  really unclear as to what of the transitive dependencies are actually required to
    // run the embedded server.  it is really annoying
    testCompile libraries.cassandraUnit
	 testCompile project (':platform:arcus-test')

    runtime libraries.logback
}   

docker {
   baseImage "arcus/java"
}

distDocker {
   tag = "${project.dockerGroup}/${project.applicationName}"
   tagVersion = dockerVersion
   
   defaultCommand(["-H", "/${project.applicationName}-${project.version}/", "-P", "dev", "-a"])
}

task tagDocker(type: Exec) {
    dependsOn "distDocker"
    def seperator = System.getenv("REGISTRY_SEPERATOR") ?: "/"
    def tag = (System.getenv("DOCKER_PREFIX_OVERRIDE") ?: project.dockerGroup) + seperator + applicationName

    if (System.getenv('REGISTRY_NAME')) {
        def registryName = System.getenv("REGISTRY_NAME")
        commandLine 'docker', 'tag', "${project.containerTag}:${project.dockerVersion}", "${registryName}/${tag}:${project.dockerVersion}"
    } else {
        commandLine 'docker', 'tag', "${project.containerTag}:${project.dockerVersion}", "${tag}:${project.dockerVersion}"
    }
}

task pushDocker(type: Exec) {
    dependsOn "tagDocker"

    def seperator = System.getenv("REGISTRY_SEPERATOR") ?: "/"
    def tag = (System.getenv("DOCKER_PREFIX_OVERRIDE") ?: project.dockerGroup) + seperator + applicationName

    if (System.getenv('REGISTRY_NAME')) {
        def registryName = System.getenv("REGISTRY_NAME")
        commandLine 'docker', 'push', "${registryName}/${project.dockerGroup}${seperator}${applicationName}:${project.dockerVersion}"
    } else {
        commandLine 'docker', 'push', "${tag}:${project.dockerVersion}"
    }
}

task runDocker(type: Exec) {
   dependsOn 'distDocker', ':platform:arcus-khakis:startPlatform'
   def List<String> cLine = new ArrayList<String>()
   cLine.add('docker');
   cLine.add('run');
   cLine.add('--name=' + project.name + '');
   cLine.add('--link=eyeris-cassandra:cassandra.eyeris');
   cLine.add('--rm');
   cLine.add("${project.dockerGroup}/${project.applicationName}:${project.version}");
   
   commandLine cLine
}

applicationDistribution.from("src/main/resources") {
    into "./"
}

artifacts {
    archives distTar
}

clean {
    delete "target"
}

schemas.each() { target -> 
   task "run-${target}"(type:JavaExec) {
      group "Application"
      description "Installs the schema for ${target} with the dev profile"
      dependsOn installDist

      def homeDir = "${project.projectDir}/src/" + (target == "platform" ? "main/resources" : "dist/${target}-resources")

      workingDir = "${buildDir}/install/modelmanager"
      classpath = files("${workingDir}/lib/*")

      systemProperty "modelmanager.home", "${homeDir}"
      systemProperty "modelmanager.schema", "${target}"

      main = "com.iris.modelmanager.ModelManager"

      environment getLocalProps()

      args = ["-c", "${project.projectDir}/src/dist/conf/arcus-modelmanager.properties"]
   }
}

run.dependsOn 'run-platform'
run.dependsOn 'run-history'
run.dependsOn 'run-video'


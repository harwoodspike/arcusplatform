<rule-catalog>

	<metadata version="2015-04-23T18:23:09.123" hash="6a757c1cd50d9486df652ef579b4e954"
		publisher="Human" />

	<categories>
		<category name="Buttons &amp; Fobs" />
		<category name="Cameras &amp; Sensors" />
		<category name="Care" />
		<category name="Climate" />
		<category name="Doors &amp; Locks" />
		<category name="Energy" />
		<category name="Home &amp; Family" />
		<category name="Lawn &amp; Garden" />
		<category name="Lights &amp; Switches" />
		<category name="Notifications" />
		<category name="Other" />
		<category name="Scene" />
		<category name="Security Alarm" />
		<category name="Smoke &amp; CO" />
		<category name="Water" />
		<category name="Windows &amp; Blinds" />
	</categories>

	<templates>
		<template id="bd1116" keywords="button" tags="note, but"
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Who Pressed a Smart Button?"
			description="Notify someone when a smart button has been pressed."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
				<category name="Notifications" />
			</categories>
			<description>When ${button} is pressed then send ${person} a message via ${method}.</description>
			<conditions>
				<attribute-value-change attribute="but:state" new="PRESSED" query="base:address == '${button}'"/>
			</conditions>
			<actions>
				<notify to="${person}" priority="${method}" key="rule.bd1116.button.pressed">
					<parameters>
						<parameter name="button">
							<attribute-value address="${button}" attribute="dev:name" />
						</parameter>
						<parameter name="time">
							<datetime-value type="datetime" />
						</parameter>
						<parameter name="_ruleName">
                            <constant-value value="${_ruleName}" />
                        </parameter>
					</parameters>
				</notify>
			</actions>
			<selectors>
				<selector type="device" name="button" query="but:state is supported" />
				<selector type="person" name="person" />
				<selector type="constant" name="method">
					<options>
						<option label="Push Notification" value="medium" />
						<option label="Email" value="low" />
					</options>
				</selector>
			</selectors>
		</template>

		<template id="16536e" keywords="button" tags="swit, but"
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Control Devices with a Button"
			description="Turn a device on or off by pressing a custom button."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When ${button} is pressed then toggle state of ${switch}.</description>
			<satisfiable-if>
				<satisfiable query="base:caps contains 'swit'" />
			</satisfiable-if>
			<conditions>
				<attribute-value-change attribute="but:state" query="base:address == '${button}'"  new="PRESSED" />
			</conditions>
			<actions>
				<device-query var="address" query="base:address == '${switch}' and swit:state == 'ON'">
					<set-attribute to="${address}" name="swit:state" value="OFF" />
				</device-query>
				<device-query var="address" query="base:address == '${switch}' and swit:state != 'ON'">
					<set-attribute to="${address}" name="swit:state" value="ON" />
				</device-query>
			</actions>
			<selectors>
				<selector type="device" name="button" query="but:state is supported" />
				<selector type="device" name="switch" query="base:caps contains 'swit'" />
			</selectors>
		</template>

		<template id="80d915" keywords="button" tags="vent,but"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Touch-Button Comfort"
         description="Open or close a vent when a Smart Button is pressed."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
         </categories>
         <description>When ${button} is pressed then open or close ${vent}.</description>
         <conditions>
            <attribute-value-change attribute="but:state" query="base:address == '${button}'"  new="PRESSED" />
         </conditions>
         <actions>
            <device-query var="address" query="base:address == '${vent}' and (vent:level != 0)">
               <set-attribute to="${address}" name="vent:level" value="0" />
            </device-query>
            <device-query var="address" query="base:address == '${vent}' and (vent:level &lt; 1)">
               <set-attribute to="${address}" name="vent:level" value="100" />
            </device-query>
         </actions>
         <selectors>
            <selector type="device" name="button" query="but:state is supported" />
            <selector type="device" name="vent" query="base:caps contains 'vent'" />
         </selectors>
      </template>

      <template id="f37345" keywords="button" tags="scene, but"
			added="2015-11-13T00:00:00"
			modified="2015-11-13T00:00:00"
			name="Push Button Scene"
			description="Run a scene when a Smart Button is pressed."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
				<category name="Scene" />
			</categories>
			<description>When ${button} is pressed then run ${scene}.</description>
			<conditions>
				<attribute-value-change attribute="but:state" new="PRESSED" query="base:address == '${button}'"/>
			</conditions>
			<actions>
				<send to="${scene}" method="scene:Fire" />
			</actions>
			<selectors>
				<selector type="device" name="button" query="but:state is supported" />
				<selector type="scene" name="scene" />
			</selectors>
		</template>

      <template id="3502e4" keywords="lock" tags="doorlock,pres"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Lock Up When I Leave"
         description="When I leave home, lock my doors."
         extra="Keyfobs and Pendants are subject to delays in order to conserve battery life."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
            <category name="Home &amp; Family" />
            <category name="Doors &amp; Locks" />
         </categories>
         <description>When ${a person or device} is absent then lock ${door}.</description>
         <conditions>
            <or>
	            <received message="subspres:Departed" from="SERV:subspres:${_placeId}">
	            	<attribute name="target" value="${a person or device}" />
	            </received>
	            <received message="subspres:Departed" from="SERV:subspres:${_placeId}">
	            	<attribute name="device" value="${a person or device}" />
	            </received>
            </or>
         </conditions>
         <actions>
            <set-attribute to="${door}" name="doorlock:lockstate" value="LOCKED" />
         </actions>
         <selectors>
            <selector type="presence" name="a person or device" />
            <selector type="device" name="door" query="base:caps contains 'doorlock'" multiple="true" />
         </selectors>
      </template>

      <template id="4t3itv" keywords="scene" tags="scene,pres"
         added="2015-11-30T00:00:00" modified="2015-11-30T00:00:00"
         name="Run a Scene When I Leave"
         description="Run a scene when a person leaves home."
         extra="Keyfobs and Pendants are subject to delays in order to conserve battery life."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
            <category name="Home &amp; Family" />
				<category name="Scene" />
         </categories>
         <description>Run the ${scene} scene when ${a person or device} departs.</description>
         <conditions>
            <or>
	            <received message="subspres:Departed" from="SERV:subspres:${_placeId}">
	               <attribute name="device" value="${a person or device}"/>
	            </received>
	            <received message="subspres:Departed" from="SERV:subspres:${_placeId}">
	               <attribute name="target" value="${a person or device}"/>
	            </received>
            </or>
         </conditions>
         <actions>
            <send to="${scene}" method="scene:Fire" />
         </actions>
         <selectors>
            <selector type="presence" name="a person or device" />
            <selector type="scene" name="scene" />
         </selectors>
      </template>

      <template id="tq29nh" keywords="scene" tags="scene,pres"
         added="2015-11-30T00:00:00" modified="2015-11-30T00:00:00"
         name="Run a Scene When I Arrive"
         description="Run a scene when a person arrives home."
         extra="Keyfobs and Pendants are subject to delays in order to conserve battery life."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
            <category name="Home &amp; Family" />
				<category name="Scene" />
         </categories>
         <description>Run the ${scene} scene when ${a person or device} arrives home.</description>
         <conditions>
            <or>
               <received message="subspres:Arrived" from="SERV:subspres:${_placeId}">
                  <attribute name="target" value="${a person or device}"/>
               </received>
               <received message="subspres:Arrived" from="SERV:subspres:${_placeId}">
                  <attribute name="device" value="${a person or device}"/>
               </received>
            </or>
         </conditions>
         <actions>
            <send to="${scene}" method="scene:Fire" />
         </actions>
         <selectors>
            <selector type="presence" name="a person or device" />
            <selector type="scene" name="scene" />
         </selectors>
      </template>

       <template id="c774bb" keywords="scene" tags="scene,pres"
         added="2015-11-30T00:00:00" modified="2015-11-30T00:00:00"
         name="Run a Scene When the Last Person Leaves"
         description="Run a Scene when the last person leaves home."
         extra="Keyfobs and Pendants are subject to delays in order to conserve battery life."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
            <category name="Home &amp; Family" />
				<category name="Scene" />
         </categories>
         <description>Run the ${scene} scene when everyone leaves home.</description>
         <conditions>
            <received message="subspres:PlaceUnoccupied" from="SERV:subspres:${_placeId}" />
         </conditions>
         <actions>
            <send to="${scene}" method="scene:Fire" />
         </actions>
         <selectors>
            <selector type="scene" name="scene" />
         </selectors>
      </template>

      <template id="6042c0" keywords="scene" tags="scene,pres"
         added="2015-11-30T00:00:00" modified="2015-11-30T00:00:00"
         name="Run a Scene When Someone Gets Home"
         description="Run a Scene when the first person arrives home."
         extra="Keyfobs and Pendants are subject to delays in order to conserve battery life."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
            <category name="Home &amp; Family" />
				<category name="Scene" />
         </categories>
         <description>Run the ${scene} scene when someone arrives to an empty house.</description>
         <conditions>
            <received message="subspres:PlaceOccupied" from="SERV:subspres:${_placeId}" />
         </conditions>
         <actions>
            <send to="${scene}" method="scene:Fire" />
         </actions>
         <selectors>
            <selector type="scene" name="scene" />
         </selectors>
      </template>

      <template id="63065f" keywords="mot" tags="mot,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Know When Nobody is Moving"
         description="Notify me when no motion is detected for a period of time."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Care" />
            <category name="Notifications" />
         </categories>
         <description>When there is no activity detected by ${device} for ${duration}, then send ${person} a message via ${method}.</description>
         <conditions>
            <duration-trigger duration="${duration}" device-query="base:address == '${device}'" condition="mot:motion == 'NONE'" unit="minutes" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.63065f.no.motion.detected">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${device}" attribute="dev:name" />
                  </parameter>
                  <parameter name="duration">
                     <constant-value value="${duration}" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="device" query="base:caps contains 'mot'" multiple="true" />
            <selector type="constant" name="duration">
               <options>
                  <option label="1 min" value="1" />
                  <option label="2 mins" value="2" />
                  <option label="3 mins" value="3" />
                  <option label="4 mins" value="4" />
                  <option label="5 mins" value="5" />
                  <option label="6 mins" value="6" />
                  <option label="7 mins" value="7" />
                  <option label="8 mins" value="8" />
                  <option label="9 mins" value="9" />
                  <option label="10 mins" value="10" />
                  <option label="15 mins" value="15" />
                  <option label="30 mins" value="30" />
                  <option label="45 mins" value="45" />
                  <option label="1 hour" value="60" />
                  <option label="2 hours" value="120" />
                  <option label="3 hours" value="180" />
                  <option label="4 hours" value="240" />
                  <option label="5 hours" value="300" />
                  <option label="6 hours" value="360" />
                  <option label="7 hours" value="420" />
                  <option label="8 hours" value="480" />
               </options>
            </selector>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="f4575c" keywords="mot" tags="mot,swit"
         added="2017-05-18T00:00:00" modified="2017-05-18T00:00:00"
         name="No Motion, Turn Lights Off"
         description="Turn lights off when there is no motion detected for a period of time."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Lights &amp; Switches" />
         </categories>
         <description>When no motion is detected by ${motion} ${for awhile}, turn ${switch} ${on or off}.</description>
         <conditions>
            <duration-trigger device-query="base:address == '${motion}'" condition="mot:motion == 'NONE'"
               duration="${for awhile}" unit="seconds" />
         </conditions>
         <actions>
            <device-query var="address" query="base:address == '${switch}' and swit:state != '${on or off}'">
               <set-attribute to="${address}" name="swit:state" value="${on or off}" />
            </device-query>
         </actions>
         <selectors>
            <selector name="motion" type="device" query="base:caps contains 'mot'" multiple="true" />
            <selector name="for awhile" type="constant">
               <options>
                  <option label="for 30 secs"  value="30" />
                  <option label="for 1 min"    value="60" />
                  <option label="for 2 mins"   value="120" />
                  <option label="for 3 mins"   value="180" />
                  <option label="for 4 mins"   value="240" />
                  <option label="for 5 mins"   value="300" />
                  <option label="for 6 mins"   value="360" />
                  <option label="for 7 mins"   value="420" />
                  <option label="for 8 mins"   value="480" />
                  <option label="for 9 mins"   value="540" />
                  <option label="for 10 mins"  value="600" />
                  <option label="for 15 mins"  value="900" />
                  <option label="for 30 mins"  value="1800" />
                  <option label="for 45 mins"  value="2700" />
                  <option label="for 1 hour"   value="3600" />
                  <option label="for 2 hours"  value="7200" />
                  <option label="for 3 hours"  value="10800" />
                  <option label="for 4 hours"  value="14400" />
                  <option label="for 5 hours"  value="18000" />
                  <option label="for 6 hours"  value="21600" />
                  <option label="for 7 hours"  value="25200" />
                  <option label="for 8 hours"  value="28800" />
               </options>
            </selector>
            <selector name="switch" type="device" query="base:caps contains 'swit'" />
            <selector name="on or off" type="constant">
               <options>
                  <option label="on" value="ON" />
                  <option label="off" value="OFF" />
               </options>
            </selector>
         </selectors>
      </template>

		<template id="5371fe" keywords="contact" tags="note, cont"
         added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
         name="Door Opened at Time"
         description="Notify me when a contact sensor is opened between certain times of day."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Care" />
            <category name="Notifications" />
         </categories>
         <description>When ${contact} is opened then send ${person} a message via ${method}.</description>
	         <conditions>
	            <attribute-value-change attribute="cont:contact" new="OPENED" query="base:address == '${contact}'" />
	         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.5371fe.contact.opened.timerange">
               <parameters>
                  <parameter name="contact">
                     <attribute-value address="${contact}" attribute="dev:name" />
                  </parameter>
                  <parameter name="time">
                     <datetime-value type="datetime" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="contact" query="cont:contact is supported" />
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="281262" keywords="cont" tags="cont,scene"
         added="2015-11-13T00:00:00"
         modified="2015-11-13T00:00:00"
         name="Run a Scene"
         description="Run a scene when a door is opened or closed."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
         </categories>
         <description>When ${door} is ${opened or closed}, then run ${scene}.</description>
         <conditions>
            <attribute-value-change attribute="cont:contact" query="base:address == '${door}'" new="${opened or closed}" />
         </conditions>
         <actions>
            <send to="${scene}" method="scene:Fire" />
         </actions>
         <selectors>
            <selector type="device" name="door" query="base:caps contains 'cont'" multiple="true" />
            <selector type="scene" name="scene" />
            <selector type="constant" name="opened or closed">
               <options>
                  <option label="opened" value="OPENED" />
                  <option label="closed" value="CLOSED" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="7033ee" keywords="presence" tags="note,pres"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Care Pendant Is Not Home"
         description="Notify me when a care pendant is missing from home."
         extra="Keyfobs and Pendants are subject to delays in order to conserve battery life."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Care" />
            <category name="Buttons &amp; Fobs" />
            <category name="Notifications" />
         </categories>
         <description>When ${person or device} is missing from home for ${duration}, then send ${person} a message via ${method}.</description>
         <conditions>
            <duration-trigger duration="${duration}" unit="minutes"
               device-query="base:caps contains 'subspres' AND subs:available == true"
               condition="subspres:devicesAway contains '${person or device}' OR subspres:peopleAway contains '${person or device}'"/>
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.7033ee.absent.duration">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${person or device}" attribute="dev:name" />
                  </parameter>
                  <parameter name="person">
                     <attribute-value address="${person or device}" attribute="person:firstName" />
                  </parameter>
                  <parameter name="duration">
                     <constant-value value="${duration}" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="presence" name="person or device" />
            <selector type="constant" name="duration">
               <options>
                  <option label="1 min" value="1" />
                  <option label="2 mins" value="2" />
                  <option label="3 mins" value="3" />
                  <option label="4 mins" value="4" />
                  <option label="5 mins" value="5" />
                  <option label="6 mins" value="6" />
                  <option label="7 mins" value="7" />
                  <option label="8 mins" value="8" />
                  <option label="9 mins" value="9" />
                  <option label="10 mins" value="10" />
                  <option label="15 mins" value="15" />
                  <option label="30 mins" value="30" />
                  <option label="45 mins" value="45" />
                  <option label="1 hour" value="60" />
                  <option label="2 hours" value="120" />
                  <option label="3 hours" value="180" />
                  <option label="4 hours" value="240" />
                  <option label="5 hours" value="300" />
                  <option label="6 hours" value="360" />
                  <option label="7 hours" value="420" />
                  <option label="8 hours" value="480" />
               </options>
            </selector>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
          </selectors>
      </template>

      <template id="902a41" keywords="cont" tags="cont,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Someone Left the Door Open"
         description="Notify me when a door or window is left open for more than a certain period of time."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Climate" />
            <category name="Doors &amp; Locks" />
            <category name="Windows &amp; Blinds" />
            <category name="Care" />
            <category name="Notifications" />
         </categories>
         <description>When ${device} is open for ${duration}, then send ${person} a message via ${method}.</description>
         <conditions>
            <duration-trigger duration="${duration}" device-query="base:address == '${device}'" condition="cont:contact == 'OPENED'" unit="minutes" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.902a41.contact.open">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${device}" attribute="dev:name" />
                  </parameter>
                  <parameter name="duration">
                     <constant-value value="${duration}" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="device" query="base:caps contains 'cont'" multiple="true" />
            <selector type="constant" name="duration">
               <options>
                  <option label="1 min" value="1" />
                  <option label="2 mins" value="2" />
                  <option label="3 mins" value="3" />
                  <option label="4 mins" value="4" />
                  <option label="5 mins" value="5" />
                  <option label="6 mins" value="6" />
                  <option label="7 mins" value="7" />
                  <option label="8 mins" value="8" />
                  <option label="9 mins" value="9" />
                  <option label="10 mins" value="10" />
                  <option label="15 mins" value="15" />
                  <option label="30 mins" value="30" />
                  <option label="45 mins" value="45" />
                  <option label="1 hour" value="60" />
                  <option label="2 hours" value="120" />
                  <option label="3 hours" value="180" />
                  <option label="4 hours" value="240" />
                  <option label="5 hours" value="300" />
                  <option label="6 hours" value="360" />
                  <option label="7 hours" value="420" />
                  <option label="8 hours" value="480" />
               </options>
            </selector>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>


        <template id="tq29nhs" keywords="scene" tags="scene,pres"
                  added="2019-07-24T00:00:00" modified="2019-07-24T00:00:00"
                  name="Change thermostat fan according to temperature condition"
                  description="Turn on or off thermostat fan depending on temperature conditionss."
                  extra="Check with your HVAC expert to ensure proper airflow through your home."
                  premium="false">
            <populations>
                <population name="general" /> <population name="qa" /> <population name="beta" />
            </populations>
            <categories>
                <category name="Climate" />
            </categories>
            <description>When ${device} temperature goes ${above or below} ${value}, then set ${therm} to ${level}.</description>
            <conditions>
                <attribute-value-threshold attribute="temp:temperature" source="${device}" threshold="${value}" trigger-when="${above or below}" sensitivity="1" />
            </conditions>
            <actions>
                <device-query var="address" query="base:address == '${therm}' and therm:fanmode != '${level}'">
                    <set-attribute to="${address}" name="therm:fanmode" value="${level}" />
                </device-query>
            </actions>
            <selectors>
                <selector type="device" name="device" query="base:caps contains 'temp'" />
                <selector type="constant" name="above or below">
                    <options>
                        <option label="below" value="BELOW" />
                        <option label="above" value="ABOVE" />
                    </options>
                </selector>
                <selector type="device" name="therm" query="base:caps contains 'therm'" />
                <selector type="constant" name="level">
                    <options>
                        <option label="AUTO" value="0" />
                        <option label="ON" value="1" />
                    </options>
                </selector>
                <selector type="temperature" name="value" min="20" max="105" increment="1" />
            </selectors>
        </template>

		<template id="0b6ff3" keywords="mot" tags="mot,vent"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Cool Whichever Room I am In"
         description="When I walk into the room, open the vent."
         extra="Check with your HVAC expert to ensure proper airflow through your home."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Climate" />
         </categories>
         <description>When the ${motion_device} detects motion, then set ${vent_device} to ${level}% open.</description>
			<conditions>
            <attribute-value-change attribute="mot:motion" new="DETECTED" query="base:address == '${motion_device}'" />
         </conditions>
         <actions>
            <device-query var="address" query="base:address == '${vent_device}' and vent:level != '${level}'">
               <set-attribute to="${address}" name="vent:level" value="${level}" />
            </device-query>
         </actions>
         <selectors>
            <selector type="device" name="motion_device" query="base:caps contains 'mot'" />
            <selector type="device" name="vent_device" query="base:caps contains 'vent'" />
            <selector type="constant" name="level">
               <options>
                  <option label="20" value="20" />
                  <option label="40" value="40" />
                  <option label="60" value="60" />
                  <option label="80" value="80" />
                  <option label="100" value="100" />
               </options>
            </selector>
         </selectors>
      </template>


		<template id="f8492e" keywords="mot" tags="mot,vent"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Do not Cool an Empty Room"
         description="When no one is in a room, close the vent."
         extra="Check with your HVAC expert to ensure proper airflow through your home."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Climate" />
         </categories>
         <description>When there is no activity detected by ${motion_device} for ${duration}, then close ${vent_device}.</description>
         <conditions>
            <duration-trigger duration="${duration}" device-query="base:address == '${motion_device}'" condition="mot:motion == 'NONE'" unit="minutes" />
         </conditions>
         <actions>
            <device-query var="address" query="base:address == '${vent_device}' and vent:level != 0">
               <set-attribute to="${address}" name="vent:level" value="0" />
            </device-query>
         </actions>
         <selectors>
            <selector type="device" name="motion_device" query="base:caps contains 'mot'" />
            <selector type="device" name="vent_device" query="base:caps contains 'vent'" />
            <selector type="constant" name="duration">
               <options>
                  <option label="1 min" value="1" />
                  <option label="2 mins" value="2" />
                  <option label="3 mins" value="3" />
                  <option label="4 mins" value="4" />
                  <option label="5 mins" value="5" />
                  <option label="6 mins" value="6" />
                  <option label="7 mins" value="7" />
                  <option label="8 mins" value="8" />
                  <option label="9 mins" value="9" />
                  <option label="10 mins" value="10" />
                  <option label="15 mins" value="15" />
                  <option label="30 mins" value="30" />
                  <option label="45 mins" value="45" />
                  <option label="1 hour" value="60" />
                  <option label="2 hours" value="120" />
                  <option label="3 hours" value="180" />
                  <option label="4 hours" value="240" />
                  <option label="5 hours" value="300" />
                  <option label="6 hours" value="360" />
                  <option label="7 hours" value="420" />
                  <option label="8 hours" value="480" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="5b738d" keywords="pres" tags="pres,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Who just got home?"
         description="Notify me when someone arrives."
         extra="Keyfobs and Pendants are subject to delays in order to conserve battery life."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
            <category name="Home &amp; Family" />
            <category name="Notifications" />
         </categories>
         <description>When ${a person or device} arrives, then send ${person} a message via ${method}.</description>
         <conditions>
            <or>
               <received message="subspres:Arrived" from="SERV:subspres:${_placeId}">
                  <attribute name="target" value="${a person or device}" />
               </received>
               <received message="subspres:Arrived" from="SERV:subspres:${_placeId}">
                  <attribute name="device" value="${a person or device}" />
               </received>
            </or>
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.5b738d.presence">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${a person or device}" attribute="dev:name" />
                  </parameter>
                  <parameter name="person">
                     <attribute-value address="${a person or device}" attribute="person:firstName" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="presence" name="a person or device" />
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>


      <template id="4d073c" keywords="pres" tags="pres,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Who left the House?"
         description="Notify me when someone leaves."
         extra="Keyfobs and Pendants are subject to delays in order to conserve battery life."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
            <category name="Home &amp; Family" />
            <category name="Notifications" />
         </categories>
         <description>When ${a person or device} leaves, then send ${person} a message via ${method}.</description>
         <conditions>
            <or>
               <received message="subspres:Departed" from="SERV:subspres:${_placeId}">
                  <attribute name="target" value="${a person or device}" />
               </received>
               <received message="subspres:Departed" from="SERV:subspres:${_placeId}">
                  <attribute name="device" value="${a person or device}" />
               </received>
            </or>
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.4d073c.absence">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${a person or device}" attribute="dev:name" />
                  </parameter>
                  <parameter name="person">
                     <attribute-value address="${a person or device}" attribute="person:firstName" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="presence" name="a person or device" />
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

     <template id="3cdbb0" keywords="cont" tags="cont,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Did Someone Open a Window?"
         description="Notify me when a window opens."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Windows &amp; Blinds" />
            <category name="Doors &amp; Locks" />
            <category name="Notifications" />
         </categories>
         <description>When ${device} is opened, then send ${person} a message via ${method}.</description>
         <conditions>
            <attribute-value-change attribute="cont:contact" new="OPENED" query="base:address == '${device}'" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.3cdbb0.cont.opened">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${device}" attribute="dev:name" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="device" query="base:caps contains 'cont'" />
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

<template id="3cdbbz" keywords="cont" tags="cont,note"
         added="2018-05-18T00:00:00" modified="2018-05-18T00:00:00"
         name="Did QA Open a Window?"
         description="Notify QA when a window opens."
         premium="false">
         <populations>
            <population name="qa" />
         </populations>
         <categories>
            <category name="Windows &amp; Blinds" />
            <category name="Doors &amp; Locks" />
            <category name="Notifications" />
         </categories>
         <description>When ${device} is opened, then send ${person} a message via ${method} only if they are in QA</description>
         <conditions>
            <attribute-value-change attribute="cont:contact" new="OPENED" query="base:address == '${device}'" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.3cdbb0.cont.opened">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${device}" attribute="dev:name" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="device" query="base:caps contains 'cont'" />
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>
      

      <!--  NOTE - still sends DISARM when alarm system is already disarmed -->
      <template id="2a4a21" keywords="cont" tags="cont,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Alarm off with a Lock"
         description="Disarm the security alarm when a lock is unlocked."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Security Alarm" />
         </categories>
         <description>When ${device} is unlocked, disarm the security alarm.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'subsecurity' AND subs:available == true" />
         </satisfiable-if>
         <conditions>
            <context-query
            	satisfiable-if="base:address == 'SERV:subsecurity:${_placeId}' AND subs:available == true"
            	query="subsecurity:alarmState != 'DISARMED'" >
               <or>
                  <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKING"
                     query="base:address == '${device}'" />
                  <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKED"
                     query="base:address == '${device}'" />
               </or>
            </context-query>
         </conditions>
         <actions>
            <send to="SERV:subsecurity:${_placeId}" method="subsecurity:Disarm" />
         </actions>
         <selectors>
            <selector type="device" name="device" query="base:caps contains 'doorlock'" />
         </selectors>
      </template>

		<template id="890b7e" keywords="motdoor" tags="motdoor"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Alarm Set, Garage Door Closed"
         description="When the security alarm is turned on, close my garage door."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Security Alarm" />
         </categories>
         <description>When the security alarm is set to ${state}, then ${control} the ${garage_door}.</description>
         <conditions>
				<attribute-value-change attribute="subsecurity:alarmState" new="${state}" />
         </conditions>
         <actions>
             <set-attribute to="${garage_door}" name="motdoor:doorstate" value="${control}" />
         </actions>
         <selectors>
            <selector type="device" name="garage_door" query="base:caps contains 'motdoor'" />
            <selector type="constant" name="control">
               <options>
                  <option label="open" value="OPEN" />
                  <option label="close" value="CLOSED" />
               </options>
            </selector>
            <selector type="constant" name="state">
               <options>
                  <option label="Disarmed" value="DISARMED" />
                  <option label="Armed" value="ARMED" />
               </options>
            </selector>
         </selectors>
      </template>

	<template id="3dbfc6" keywords="" tags=""
         added="2015-08-27T00:00:00" modified="2016-01-04T00:00:00"
         name="Alarm Set, Lights Out"
         description="When the security alarm mode changes, then control a device."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Lights &amp; Switches" />
            <category name="Security Alarm" />
         </categories>
         <description>When the security alarm is set to ${mode}, then ${control} ${light} ${for awhile}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'swit'" />
            <satisfiable query="base:caps contains 'subsecurity' AND subs:available == true" />
         </satisfiable-if>
         <conditions>
            <attribute-value-change attribute="subsecurity:alarmMode" new="${mode}" />
         </conditions>
         <actions>
           	<set-attribute
           		to="${light}"
           		name="swit:state"
           		value="${control}"
           		duration="${for awhile}"
           		/>
         </actions>
         <selectors>
            <selector type="constant" name="mode">
               <options>
                  <option label="On" value="ON" />
                  <option label="Partial" value="PARTIAL" />
                  <option label="Off" value="OFF" />
               </options>
            </selector>
            <selector type="device" name="light" query="base:caps contains 'swit'" />
            <selector type="constant" name="control">
               <options>
                  <option label="Turn off" value="OFF" />
                  <option label="Turn on" value="ON" />
               </options>
            </selector>
            <selector type="constant" name="for awhile">
               <options>
                  <option label="and leave it"  value="0" />
                  <option label="for 30 secs"   value="30" />
                  <option label="for 1 min"     value="60" />
                  <option label="for 2 mins"    value="120" />
                  <option label="for 3 mins"    value="180" />
                  <option label="for 4 mins"    value="240" />
                  <option label="for 5 mins"    value="300" />
                  <option label="for 6 mins"    value="360" />
                  <option label="for 7 mins"    value="420" />
                  <option label="for 8 mins"    value="480" />
                  <option label="for 9 mins"    value="540" />
                  <option label="for 10 mins"   value="600" />
                  <option label="for 15 mins"   value="900" />
                  <option label="for 30 mins"   value="1800" />
                  <option label="for 45 mins"   value="2700" />
                  <option label="for 1 hour"    value="3600" />
                  <option label="for 2 hours"   value="7200" />
                  <option label="for 3 hours"   value="10800" />
                  <option label="for 4 hours"   value="14400" />
                  <option label="for 5 hours"   value="18000" />
                  <option label="for 6 hours"   value="21600" />
                  <option label="for 7 hours"   value="25200" />
                  <option label="for 8 hours"   value="28800" />
               </options>
            </selector>
         </selectors>
      </template>

	<template id="47e925" keywords="" tags=""
         added="2015-08-27T00:00:00" modified="2015-08-27T00:00:00"
         name="Alarm Triggered, Turn Lights On"
         description="When the security alarm mode changes, then control a device."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Lights &amp; Switches" />
            <category name="Security Alarm" />
         </categories>
         <description>When the security alarm changes to ${state}, then switch ${on_or_off} ${light} ${for awhile}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'swit'" />
            <satisfiable query="base:caps contains 'subsecurity' AND subs:available == true" />
         </satisfiable-if>
         <conditions>
				<attribute-value-change attribute="subsecurity:alarmState" new="${state}" />
         </conditions>
         <actions>
           	<set-attribute
           		to="${light}"
           		name="swit:state"
           		value="${on_or_off}"
           		duration="${for awhile}"
           		/>
         </actions>
         <selectors>
            <selector type="constant" name="state">
               <options>
                  <option label="Alert" value="ALERT" />
                  <option label="Off" value="DISARMED" />
                  <option label="On or Partial" value="ARMED" />
                  <option label="Arming" value="ARMING" />
                  <option label="Soaking" value="SOAKING" />
               </options>
            </selector>
            <selector type="device" name="light" query="base:caps contains 'swit'" />
            <selector type="constant" name="on_or_off">
               <options>
                  <option label="On" value="ON" />
                  <option label="Off" value="OFF" />
               </options>
            </selector>
            <selector type="constant" name="for awhile">
               <options>
                  <option label="and leave it"  value="0" />
                  <option label="for 30 secs"   value="30" />
                  <option label="for 1 min"     value="60" />
                  <option label="for 2 mins"    value="120" />
                  <option label="for 3 mins"    value="180" />
                  <option label="for 4 mins"    value="240" />
                  <option label="for 5 mins"    value="300" />
                  <option label="for 6 mins"    value="360" />
                  <option label="for 7 mins"    value="420" />
                  <option label="for 8 mins"    value="480" />
                  <option label="for 9 mins"    value="540" />
                  <option label="for 10 mins"   value="600" />
                  <option label="for 15 mins"   value="900" />
                  <option label="for 30 mins"   value="1800" />
                  <option label="for 45 mins"   value="2700" />
                  <option label="for 1 hour"    value="3600" />
                  <option label="for 2 hours"   value="7200" />
                  <option label="for 3 hours"   value="10800" />
                  <option label="for 4 hours"   value="14400" />
                  <option label="for 5 hours"   value="18000" />
                  <option label="for 6 hours"   value="21600" />
                  <option label="for 7 hours"   value="25200" />
                  <option label="for 8 hours"   value="28800" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="fe6b49" keywords="safety" tags="safety,swit"
         added="2017-05-19T00:00:00" modified="2017-05-19T00:00:00"
         name="Smoke Detected, Turn Toaster Off"
         description="When a smoke alarm is triggered, then turn off the toaster."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Lights &amp; Switches" />
            <category name="Security Alarm" />
            <category name="Smoke &amp; CO" />
            <category name="Water" />
         </categories>
         <description>When a ${alarm} is triggered, turn ${switch} ${on or off} ${for awhile}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'subalarm' AND subalarm:alarmState != 'INACTIVE'" />
         </satisfiable-if>
         <conditions>
            <received message="incident:${alarm}" />
         </conditions>
         <actions>
            <set-attribute to="${switch}" name="swit:state" value="${on or off}" duration="${for awhile}" />
         </actions>
         <selectors>
            <selector name="alarm" type="available-alert">
               <options>
                  <option label="CO alarm"       value="COAlert"       match="CO" />
                  <option label="Smoke alarm"    value="SmokeAlert"    match="SMOKE" />
                  <option label="Security alarm" value="SecurityAlert" match="SECURITY" />
                  <option label="Panic alarm"    value="PanicAlert"    match="PANIC" />
                  <option label="Water alarm"    value="WaterAlert"    match="WATER" />
               </options>
            </selector>
            <selector name="switch" type="device" query="base:caps contains 'swit'" />
            <selector name="on or off" type="constant">
               <options>
                  <option label="on" value="ON" />
                  <option label="off" value="OFF" />
               </options>
            </selector>
            <selector name="for awhile" type="constant">
               <options>
                  <option label="and leave it" value="0" />
                  <option label="for 30 secs"  value="30" />
                  <option label="for 1 min"    value="60" />
                  <option label="for 2 mins"   value="120" />
                  <option label="for 3 mins"   value="180" />
                  <option label="for 4 mins"   value="240" />
                  <option label="for 5 mins"   value="300" />
                  <option label="for 6 mins"   value="360" />
                  <option label="for 7 mins"   value="420" />
                  <option label="for 8 mins"   value="480" />
                  <option label="for 9 mins"   value="540" />
                  <option label="for 10 mins"  value="600" />
                  <option label="for 15 mins"  value="900" />
                  <option label="for 30 mins"  value="1800" />
                  <option label="for 45 mins"  value="2700" />
                  <option label="for 1 hour"   value="3600" />
                  <option label="for 2 hours"  value="7200" />
                  <option label="for 3 hours"  value="10800" />
                  <option label="for 4 hours"  value="14400" />
                  <option label="for 5 hours"  value="18000" />
                  <option label="for 6 hours"  value="21600" />
                  <option label="for 7 hours"  value="25200" />
                  <option label="for 8 hours"  value="28800" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="9b4825" keywords="security" tags="security,scene"
         added="2015-11-16T00:00:00"
         modified="2015-11-16T00:00:00"
         name="Alarm Triggered, Run a Scene"
         description="When the security alarm is triggered, then run a scene."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Security Alarm" />
				<category name="Scene" />
         </categories>
         <description>When the security alarm triggers, then run ${scene}.</description>
         <conditions>
				<attribute-value-change attribute="subsecurity:alarmState" new="ALERT" />
         </conditions>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'subsecurity' AND subs:available == true" />
         </satisfiable-if>
         <actions>
       		 <send to="${scene}" method="scene:Fire" />
         </actions>
         <selectors>
            <selector type="scene" name="scene" />
         </selectors>
      </template>

	<!-- Will need an update for being able to select all locks versus just a single lock -->
		<template id="54baaa" keywords="" tags=""
         added="2015-08-27T00:00:00" modified="2015-08-27T00:00:00"
         name="CO Detected; Unlock Doors"
         description="When carbon monoxide is detected, unlock my locks."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Smoke &amp; CO" />
         </categories>
         <description>When carbon monoxide is detected, then unlock the ${lock}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'co'"/>
         </satisfiable-if>
         <conditions>
				<attribute-value-change attribute="co:co" new="DETECTED" />
         </conditions>
         <actions>
                  <set-attribute to="${lock}" name="doorlock:lockstate" value="UNLOCKED" />
         </actions>
         <selectors>
            <selector type="device" name="lock" query="base:caps contains 'doorlock'" />
         </selectors>
      </template>

	<template id="180a7e" keywords="pres" tags="pres,note"
         added="2015-08-27T00:00:00" modified="2015-08-27T00:00:00"
         name="Person Did not Return"
         description="Notify me when a care pendant is missing from home for a certain period of time and does not return."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Care" />
            <category name="Notifications" />
         </categories>
         <description>When ${person or device} is gone for ${duration}, then send ${person} a message via ${method}.</description>
         <conditions>
            <duration-trigger duration="${duration}" unit="minutes"
               device-query="base:caps contains 'subspres' AND subs:available == true"
               condition="subspres:devicesAway contains '${person or device}' OR subspres:peopleAway contains '${person or device}'"/>
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.180a7e.pres.absent">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${person or device}" attribute="dev:name" />
                  </parameter>
                  <parameter name="person">
                     <attribute-value address="${person or device}" attribute="person:firstName" />
                  </parameter>
                  <parameter name="duration">
                     <constant-value value="${duration}" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="presence" name="person or device" />
            <selector type="constant" name="duration">
               <options>
                  <option label="1 min" value="1" />
                  <option label="2 mins" value="2" />
                  <option label="3 mins" value="3" />
                  <option label="4 mins" value="4" />
                  <option label="5 mins" value="5" />
                  <option label="6 mins" value="6" />
                  <option label="7 mins" value="7" />
                  <option label="8 mins" value="8" />
                  <option label="9 mins" value="9" />
                  <option label="10 mins" value="10" />
                  <option label="15 mins" value="15" />
                  <option label="30 mins" value="30" />
                  <option label="45 mins" value="45" />
                  <option label="1 hour" value="60" />
                  <option label="2 hours" value="120" />
                  <option label="3 hours" value="180" />
                  <option label="4 hours" value="240" />
                  <option label="5 hours" value="300" />
                  <option label="6 hours" value="360" />
                  <option label="7 hours" value="420" />
                  <option label="8 hours" value="480" />
               </options>
            </selector>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

<!-- Will need an update for being able to select all locks versus just a single lock -->
		<template id="5856c8" keywords="" tags=""
         added="2015-08-27T00:00:00" modified="2017-06-02T00:00:00"
         name="Fast and Easy Fire Escape"
         description="When smoke is detected, unlock my locks."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
         </categories>
         <description>When smoke is detected, then unlock the ${lock}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'smoke'" />
         </satisfiable-if>
         <conditions>
				<attribute-value-change attribute="smoke:smoke" new="DETECTED" />
         </conditions>
         <actions>
                  <set-attribute to="${lock}" name="doorlock:lockstate" value="UNLOCKED" />
         </actions>
         <selectors>
            <selector type="device" name="lock" query="base:caps contains 'doorlock'" />
         </selectors>
      </template>

	<template id="47e926" keywords="" tags="safety,switch"
         added="2016-01-04T00:00:00" modified="2017-06-02T00:00:00"
         name="Smoke Detected, Turn Lights On"
         description="When smoke or carbon monoxide are detected, then switch on a light for awhile."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Lights &amp; Switches" />
            <category name="Smoke &amp; CO" />
         </categories>
         <description>When smoke or carbon monoxide are detected, turn ${light} ${on} ${for awhile}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'smoke' OR base:caps contains 'co'" />
         </satisfiable-if>
         <conditions>
            <or>
               <attribute-value-change attribute="co:co" new="DETECTED" />
               <attribute-value-change attribute="smoke:smoke" new="DETECTED" />
            </or>
         </conditions>
         <actions>
       		 <set-attribute
       		 	to="${light}"
       		 	name="swit:state"
       		 	value="${on}"
       		 	duration="${for awhile}"
       		 	/>
         </actions>
         <selectors>
            <selector type="device" name="light" query="base:caps contains 'swit'" />
            <selector type="constant" name="on">
               <options>
                  <option label="on" value="ON" />
                  <option label="off" value="OFF" />
               </options>
            </selector>
            <selector type="constant" name="for awhile">
               <options>
                  <option label="and leave it"  value="0" />
                  <option label="for 30 secs"   value="30" />
                  <option label="for 1 min"     value="60" />
                  <option label="for 2 mins"    value="120" />
                  <option label="for 3 mins"    value="180" />
                  <option label="for 4 mins"    value="240" />
                  <option label="for 5 mins"    value="300" />
                  <option label="for 6 mins"    value="360" />
                  <option label="for 7 mins"    value="420" />
                  <option label="for 8 mins"    value="480" />
                  <option label="for 9 mins"    value="540" />
                  <option label="for 10 mins"   value="600" />
                  <option label="for 15 mins"   value="900" />
                  <option label="for 30 mins"   value="1800" />
                  <option label="for 45 mins"   value="2700" />
                  <option label="for 1 hour"    value="3600" />
                  <option label="for 2 hours"   value="7200" />
                  <option label="for 3 hours"   value="10800" />
                  <option label="for 4 hours"   value="14400" />
                  <option label="for 5 hours"   value="18000" />
                  <option label="for 6 hours"   value="21600" />
                  <option label="for 7 hours"   value="25200" />
                  <option label="for 8 hours"   value="28800" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="1b7bef" keywords="safety" tags="safety,scene"
         added="2015-11-16T00:00:00"
         modified="2017-06-02T00:00:00"
         name="Smoke or CO Detected, Run a Scene"
         description="When smoke or carbon monoxide are detected, then run a scene."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Smoke &amp; CO" />
				<category name="Scene" />
         </categories>
         <description>When smoke or carbon monoxide are detected, then run ${scene}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'smoke' OR base:caps contains 'co'" />
         </satisfiable-if>
         <conditions>
            <or>
               <attribute-value-change attribute="co:co" new="DETECTED" />
               <attribute-value-change attribute="smoke:smoke" new="DETECTED" />
            </or>
         </conditions>
         <actions>
       		 <send to="${scene}" method="scene:Fire" />
         </actions>
         <selectors>
            <selector type="scene" name="scene" />
         </selectors>
      </template>

     <template id="19cd1c" keywords="" tags=""
         added="2015-08-27T00:00:00" modified="2015-08-27T00:00:00"
         name="Turn Off a Device That's Been On Too Long"
         description="When a smart plug has been on for too long turn it off."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
         	<category name="Lights &amp; Switches" />
            <category name="Energy" />
         </categories>
         <description>When ${device} has been on for ${duration}, then turn it off.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'swit'" />
         </satisfiable-if>
         <conditions>
				<duration-trigger duration="${duration}" device-query="base:address == '${device}'" condition="swit:state == 'ON'" unit="minutes" />
         </conditions>
         <actions>
                  <set-attribute to="${device}" name="swit:state" value="OFF" />
         </actions>
         <selectors>
            <selector type="device" name="device" query="base:caps contains 'swit'" multiple="true" />
            <selector type="constant" name="duration">
               <options>
                  <option label="1 min"     value="1" />
                  <option label="2 mins"    value="2" />
                  <option label="3 mins"    value="3" />
                  <option label="4 mins"    value="4" />
                  <option label="5 mins"    value="5" />
                  <option label="6 mins"    value="6" />
                  <option label="7 mins"    value="7" />
                  <option label="8 mins"    value="8" />
                  <option label="9 mins"    value="9" />
                  <option label="10 mins"   value="10" />
                  <option label="15 mins"   value="15" />
                  <option label="30 mins"   value="30" />
                  <option label="45 mins"   value="45" />
                  <option label="1 hour"    value="60" />
                  <option label="2 hours"   value="120" />
                  <option label="3 hours"   value="180" />
                  <option label="4 hours"   value="240" />
                  <option label="5 hours"   value="300" />
                  <option label="6 hours"   value="360" />
                  <option label="7 hours"   value="420" />
                  <option label="8 hours"   value="480" />
               </options>
            </selector>
         </selectors>
      </template>


	<template id="57befa" keywords="pres" tags="pres,note"
         added="2015-08-27T00:00:00" modified="2015-08-27T00:00:00"
         name="Person is not Home"
         description="Notify me when a Care pendant is missing from home"
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Home &amp; Family" />
         </categories>
         <description>When ${person or device} is missing from home for ${duration}, then send ${person} a message via ${method}.</description>
         <conditions>
            <duration-trigger duration="${duration}" unit="minutes"
               device-query="base:caps contains 'subspres' AND subs:available == true"
               condition="subspres:devicesAway contains '${person or device}' OR subspres:peopleAway contains '${person or device}'"/>
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.57befa.pres.absent">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${person or device}" attribute="dev:name" />
                  </parameter>
                  <parameter name="person">
                     <attribute-value address="${person or device}" attribute="person:firstName" />
                  </parameter>
                  <parameter name="duration">
                     <constant-value value="${duration}" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="presence" name="person or device" multiple="true" />
            <selector type="constant" name="duration" >
               <options>
                  <option label="1 min" value="1" />
                  <option label="2 mins" value="2" />
                  <option label="3 mins" value="3" />
                  <option label="4 mins" value="4" />
                  <option label="5 mins" value="5" />
                  <option label="6 mins" value="6" />
                  <option label="7 mins" value="7" />
                  <option label="8 mins" value="8" />
                  <option label="9 mins" value="9" />
                  <option label="10 mins" value="10" />
                  <option label="15 mins" value="15" />
                  <option label="30 mins" value="30" />
                  <option label="45 mins" value="45" />
                  <option label="1 hour" value="60" />
                  <option label="2 hours" value="120" />
                  <option label="3 hours" value="180" />
                  <option label="4 hours" value="240" />
                  <option label="5 hours" value="300" />
                  <option label="6 hours" value="360" />
                  <option label="7 hours" value="420" />
                  <option label="8 hours" value="480" />
               </options>
            </selector>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>


	<template id="43a2db" keywords="pres" tags="pres,doorlock"
         added="2015-08-27T00:00:00" modified="2015-08-27T00:00:00"
         name="Unlock Door When Person is Home"
         description="When I arrive home, unlock my door."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
         </categories>
         <description>When ${person or device} returns home, then unlock ${doorlock}.</description>
         <conditions>
            <or>
               <received message="subspres:Arrived" from="SERV:subspres:${_placeId}">
                  <attribute name="target" value="${person or device}" />
               </received>
               <received message="subspres:Arrived" from="SERV:subspres:${_placeId}">
                  <attribute name="device" value="${person or device}" />
               </received>
            </or>
         </conditions>
         <actions>
      		 <device-query var="address" query="base:address == '${doorlock}'">
                  <set-attribute to="${address}" name="doorlock:lockstate" value="UNLOCKED" />
       		 </device-query>
         </actions>
         <selectors>
            <selector type="presence" name="person or device" />
            <selector type="device" name="doorlock" query="base:caps contains 'doorlock'" multiple="true" />
         </selectors>
      </template>

		<template id="d2833a" keywords="tilt" tags="note, tilt"
         added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
         name="Tilt Sensor Triggered"
         description="Notify me when a tilt sensor is changed between certain times of day."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Notifications" />
         </categories>
         <description>When ${tilt} changes to ${state} then send ${person} a message via ${method}.</description>
         <conditions>
            <attribute-value-change attribute="tilt:tiltstate" new="${state}" query="base:address == '${tilt}'" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.d2833a.tilt.sensor.change">
               <parameters>
                  <parameter name="tilt">
                     <attribute-value address="${tilt}" attribute="dev:name" />
                  </parameter>
                  <parameter name="time">
                     <datetime-value type="datetime" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
                  <parameter name="state">
                    <constant-value value="${state}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="tilt" query="tilt:tiltstate is supported" />
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
            <selector type="constant" name="state">
               <options>
                  <option label="Upright" value="UPRIGHT" />
                  <option label="Flat" value="FLAT" />
               </options>
            </selector>
         </selectors>
      </template>

		<template id="6c3953" keywords="motdoor" tags="motdoor,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Garage Door Activated"
         description="Notify me when my garage door is opened or closed."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Notifications" />
         </categories>
         <description>When ${garage door} is set to ${opened or closed} ${for awhile}, then send ${person} a message via ${method}.</description>
         <conditions>
            <or>
               <if var="${opened or closed}" equals="OPEN">
                  <duration-trigger condition="motdoor:doorstate != 'CLOSED'"
                     device-query="base:address == '${garage door}'" duration="${for awhile}" unit="seconds" />
               </if>
               <if var="${opened or closed}" equals="CLOSED">
                  <duration-trigger condition="motdoor:doorstate == 'CLOSED'"
                     device-query="base:address == '${garage door}'" duration="${for awhile}" unit="seconds" />
               </if>
            </or>
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.6c3953.garage.door.activiated">
               <parameters>
                  <parameter name="garagedoor">
                     <attribute-value address="${garage door}" attribute="dev:name" />
                  </parameter>
                  <parameter name="state">
                     <attribute-value address="${garage door}" attribute="motdoor:doorstate" />
                  </parameter>permission
                  <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="garage door" query="base:caps contains 'motdoor'" />
            <selector type="constant" name="opened or closed">
               <options>
                  <option label="opened" value="OPEN" />
                  <option label="closed" value="CLOSED" />
               </options>
            </selector>
            <selector type="constant" name="for awhile">
               <options>
                  <option label="immediately" value="0" />
                  <option label="for 30 secs" value="30" />
                  <option label="for 1 min"   value="60" />
                  <option label="for 2 mins"  value="120" />
                  <option label="for 3 mins"  value="180" />
                  <option label="for 4 mins"  value="240" />
                  <option label="for 5 mins"  value="300" />
                  <option label="for 6 mins"  value="360" />
                  <option label="for 7 mins"  value="420" />
                  <option label="for 8 mins"  value="480" />
                  <option label="for 9 mins"  value="540" />
                  <option label="for 10 mins" value="600" />
                  <option label="for 15 mins" value="900" />
                  <option label="for 30 mins" value="1800" />
                  <option label="for 45 mins" value="2700" />
                  <option label="for 1 hour"  value="3600" />
                  <option label="for 2 hours" value="7200" />
                  <option label="for 3 hours" value="10800" />
                  <option label="for 4 hours" value="14400" />
                  <option label="for 5 hours" value="18000" />
                  <option label="for 6 hours" value="21600" />
                  <option label="for 7 hours" value="25200" />
                  <option label="for 8 hours" value="28800" />
               </options>
            </selector>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="839b9a" keywords="motdoor" tags="motdoor,swit"
         added="2017-05-08T00:00:00" modified="2017-05-08T00:00:00"
         name="Garage Door Opened, Activate Switch"
         description="When a garage door is opened or closed, turn a switch on or off."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Lights &amp; Switches" />
         </categories>
         <description>When ${garage door} is ${opened or closed}, then turn ${switch} ${on or off} ${for awhile}.</description>
         <conditions>
            <or>
               <if var="${opened or closed}" equals="opened">
                  <or>
                     <attribute-value-change attribute="motdoor:doorstate" old="CLOSED" new="OPENING"
                        query="base:address == '${garage door}'" />
                     <attribute-value-change attribute="motdoor:doorstate" old="CLOSED" new="OPEN"
                        query="base:address == '${garage door}'" />
                  </or>
               </if>
               <if var="${opened or closed}" equals="closed">
                  <or>
                     <attribute-value-change attribute="motdoor:doorstate" old="CLOSING" new="CLOSED"
                        query="base:address == '${garage door}'" />
                     <attribute-value-change attribute="motdoor:doorstate" old="OPEN" new="CLOSED"
                        query="base:address == '${garage door}'" />
                  </or>
               </if>
            </or>
         </conditions>
         <actions>
            <set-attribute
               to="${switch}"
               name="swit:state"
               value="${on or off}"
               duration="${for awhile}" />
         </actions>
         <selectors>
            <selector name="garage door" type="device" query="base:caps contains 'motdoor'" />
            <selector name="opened or closed" type="constant">
               <options>
                  <option label="opened" value="opened" />
                  <option label="closed" value="closed" />
               </options>
            </selector>
            <selector name="switch" type="device" query="base:caps contains 'swit'" />
            <selector name="on or off" type="constant">
               <options>
                  <option label="on" value="ON" />
                  <option label="off" value="OFF" />
               </options>
            </selector>
            <selector name="for awhile" type="constant">
               <options>
                  <option label="and leave it" value="0" />
                  <option label="for 30 secs"  value="30" />
                  <option label="for 1 min"    value="60" />
                  <option label="for 2 mins"   value="120" />
                  <option label="for 3 mins"   value="180" />
                  <option label="for 4 mins"   value="240" />
                  <option label="for 5 mins"   value="300" />
                  <option label="for 6 mins"   value="360" />
                  <option label="for 7 mins"   value="420" />
                  <option label="for 8 mins"   value="480" />
                  <option label="for 9 mins"   value="540" />
                  <option label="for 10 mins"  value="600" />
                  <option label="for 15 mins"  value="900" />
                  <option label="for 30 mins"  value="1800" />
                  <option label="for 45 mins"  value="2700" />
                  <option label="for 1 hour"   value="3600" />
                  <option label="for 2 hours"  value="7200" />
                  <option label="for 3 hours"  value="10800" />
                  <option label="for 4 hours"  value="14400" />
                  <option label="for 5 hours"  value="18000" />
                  <option label="for 6 hours"  value="21600" />
                  <option label="for 7 hours"  value="25200" />
                  <option label="for 8 hours"  value="28800" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="afc2ca" keywords="motdoor" tags="motdoor,scene"
         added="2017-05-08T00:00:00" modified="2017-05-08T00:00:00"
         name="Garage Door Opened, Run a Scene"
         description="When a garage door is opened or closed, run a scene."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Scene" />
         </categories>
         <description>When ${garage door} is ${opened or closed}, then run ${scene}.</description>
         <conditions>
            <or>
               <if var="${opened or closed}" equals="opened">
                  <or>
                     <attribute-value-change attribute="motdoor:doorstate" old="CLOSED" new="OPENING"
                        query="base:address == '${garage door}'" />
                     <attribute-value-change attribute="motdoor:doorstate" old="CLOSED" new="OPEN"
                        query="base:address == '${garage door}'" />
                  </or>
               </if>
               <if var="${opened or closed}" equals="closed">
                  <or>
                     <attribute-value-change attribute="motdoor:doorstate" old="CLOSING" new="CLOSED"
                        query="base:address == '${garage door}'" />
                     <attribute-value-change attribute="motdoor:doorstate" old="OPEN" new="CLOSED"
                        query="base:address == '${garage door}'" />
                  </or>
               </if>
            </or>
         </conditions>
         <actions>
            <send to="${scene}" method="scene:Fire" />
         </actions>
         <selectors>
            <selector name="garage door" type="device" query="base:caps contains 'motdoor'" />
            <selector name="opened or closed" type="constant">
               <options>
                  <option label="opened" value="opened" />
                  <option label="closed" value="closed" />
               </options>
            </selector>
            <selector type="scene" name="scene" />
         </selectors>
      </template>

      <template id="438d5f" keywords="doorlock" tags="doorlock,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Door Lock Activated"
         description="Notify me when a door is locked or unlocked."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Notifications" />
         </categories>
         <description>When the ${door} is set to ${state}, then send ${person} a message via ${method}.</description>
         <conditions>
            <or>
               <if var="${state}" equals="UNLOCKED">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKING"
                        query="base:address == '${door}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKED"
                        query="base:address == '${door}'" />
                  </or>
               </if>
               <if var="${state}" equals="LOCKED">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="UNLOCKED" new="LOCKED"
                        query="base:address == '${door}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKING" new="LOCKED"
                        query="base:address == '${door}'" />
                  </or>
               </if>
            </or>
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.438d5f.doorlock.activiated">
               <parameters>
                  <parameter name="door">
                     <attribute-value address="${door}" attribute="dev:name" />
                  </parameter>
                  <parameter name="state">
                     <attribute-value address="${door}" attribute="doorlock:lockstate" />
                  </parameter>permission
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="door" query="base:caps contains 'doorlock'" />
            <selector type="constant" name="state">
               <options>
                  <option label="Locked" value="LOCKED" />
                  <option label="Unlocked" value="UNLOCKED" />
               </options>
            </selector>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="d6a735" keywords="doorlock" tags="doorlock,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Lock Doors When Security is On"
         description="Automatically lock my doors when the security alarm is on."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
         </categories>
         <description>When the security alarm is turned on but a lock is NOT locked then lock lock and send ${person} a message via ${method}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'subsecurity' AND subs:available == true" />
            <satisfiable query="base:caps contains 'doorlock'" />
         </satisfiable-if>
         <conditions>
            <context-query satisfiable-if="doorlock:lockstate is supported"
               query="doorlock:lockstate != 'LOCKED' AND doorlock:lockstate != 'LOCKING'">
               <query-change
                  device-query="base:address == 'SERV:subsecurity:${_placeId}' AND subs:available == true"
                  condition="subsecurity:alarmMode == 'ON' AND subsecurity:alarmState == 'ARMED'" />
            </context-query>
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.d6a735.lock.door.sec.on">
               <parameters>
                  <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
            <!-- Watch for query NOT it can hit other devices, requires the "{Attribute} is supported" -->
            <device-query var="address" query="doorlock:lockstate is supported AND doorlock:lockstate != 'LOCKED'">
               <set-attribute to="${address}" name="doorlock:lockstate" value="LOCKED" />
            </device-query>
         </actions>
         <selectors>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

  <template id="c64e13" keywords="doorlock" tags="doorlock,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Forgot to Lock the Door"
         description="Notify me when alarm is on and door is unlocked"
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Notifications" />
         </categories>
         <description>When the security alarm is turned on but a lock is NOT locked then send ${person} a message via ${method}.</description>
         <conditions>
			<context-query
            	satisfiable-if="doorlock:lockstate is supported"
            	query="doorlock:lockstate  == 'UNLOCKED' OR doorlock:lockstate  == 'UNLOCKING'" >
            	       <attribute-value-change attribute="subsecurity:alarmState" new="ARMED" />
            </context-query>
         </conditions>        
         <actions>
            <notify to="${person}" priority="${method}" key="rule.c64e13.sec.on.door.unlocked">
               <parameters>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'doorlock'" />
         </satisfiable-if>
         <selectors>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

	<template id="3ps8j9" keywords="doorlock" tags="doorlock,swit"
         added="2016-01-04T00:00:00" modified="2016-01-04T00:00:00"
         name="Door Locked or Unlocked, Activate Switch"
         description="When a door is locked or unlocked, then control a switch."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Lights &amp; Switches" />
         </categories>
         <description>When ${door lock} is ${locked or unlocked}, then turn ${switch} ${on} ${for awhile}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'swit'" />
         </satisfiable-if>
         <conditions>
            <or>
               <if var="${locked or unlocked}" equals="UNLOCKED">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKING"
                        query="base:address == '${door lock}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKED"
                        query="base:address == '${door lock}'" />
                  </or>
               </if>
               <if var="${locked or unlocked}" equals="LOCKED">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="UNLOCKED" new="LOCKED"
                        query="base:address == '${door lock}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKING" new="LOCKED"
                        query="base:address == '${door lock}'" />
                  </or>
               </if>
            </or>
         </conditions>
         <actions>
           	<set-attribute
           		to="${switch}"
           		name="swit:state"
           		value="${on}"
           		duration="${for awhile}"
           		/>
         </actions>
         <selectors>
            <selector type="device" name="door lock" query="base:caps contains 'doorlock'" />
            <selector type="device" name="switch" query="base:caps contains 'swit'" />
            <selector type="constant" name="on">
               <options>
                  <option label="on" value="ON" />
                  <option label="off" value="OFF" />
               </options>
            </selector>
            <selector type="constant" name="locked or unlocked">
               <options>
                  <option label="locked" value="LOCKED" />
                  <option label="unlocked" value="UNLOCKED" />
               </options>
            </selector>
            <selector type="constant" name="for awhile">
               <options>
                  <option label="and leave it"  value="0" />
                  <option label="for 30 secs"   value="30" />
                  <option label="for 1 min"     value="60" />
                  <option label="for 2 mins"    value="120" />
                  <option label="for 3 mins"    value="180" />
                  <option label="for 4 mins"    value="240" />
                  <option label="for 5 mins"    value="300" />
                  <option label="for 6 mins"    value="360" />
                  <option label="for 7 mins"    value="420" />
                  <option label="for 8 mins"    value="480" />
                  <option label="for 9 mins"    value="540" />
                  <option label="for 10 mins"   value="600" />
                  <option label="for 15 mins"   value="900" />
                  <option label="for 30 mins"   value="1800" />
                  <option label="for 45 mins"   value="2700" />
                  <option label="for 1 hour"    value="3600" />
                  <option label="for 2 hours"   value="7200" />
                  <option label="for 3 hours"   value="10800" />
                  <option label="for 4 hours"   value="14400" />
                  <option label="for 5 hours"   value="18000" />
                  <option label="for 6 hours"   value="21600" />
                  <option label="for 7 hours"   value="25200" />
                  <option label="for 8 hours"   value="28800" />
               </options>
            </selector>
         </selectors>
      </template>

  <template id="cc753c" keywords="doorlock" tags="doorlock,motdoor,garage"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Lock Up And Close Garage"
         description="When lock is locked or unlocked, open or close the garage door."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
         </categories>
         <description>When ${lock} is ${locked or unlocked} then ${open or close} ${garage door}.</description>
         <conditions>
            <or>
               <if var="${locked or unlocked}" equals="UNLOCKED">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKING"
                        query="base:address == '${lock}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKED"
                        query="base:address == '${lock}'" />
                  </or>
               </if>
               <if var="${locked or unlocked}" equals="LOCKED">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="UNLOCKED" new="LOCKED"
                        query="base:address == '${lock}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKING" new="LOCKED"
                        query="base:address == '${lock}'" />
                  </or>
               </if>
            </or>
         </conditions>
         <actions>
			<set-attribute to="${garage door}" name="motdoor:doorstate" value="${open or close}" />
         </actions>
         <selectors>
 			<selector type="device" name="lock" query="base:caps contains 'doorlock'" />
            <selector type="constant" name="locked or unlocked">
               <options>
                  <option label="locked" value="LOCKED" />
                  <option label="unlocked" value="UNLOCKED" />
               </options>
            </selector>
            <selector type="constant" name="open or close">
               <options>
                  <option label="open" value="OPEN" />
                  <option label="close" value="CLOSED" />
               </options>
            </selector>
 			<selector type="device" name="garage door" query="base:caps contains 'motdoor'" />
         </selectors>
      </template>

      <template id="1dc718" keywords="doorlock" tags="doorlock,scene"
         added="2017-05-16T00:00:00" modified="2017-05-16T00:00:00"
         name="Lock Unlocked, Run a Scene"
         description="When a door is locked or unlocked, run a scene."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Scene" />
         </categories>
         <description>When ${door lock} is ${locked or unlocked}, then run ${scene}.</description>
         <conditions>
            <or>
               <if var="${locked or unlocked}" equals="unlocked">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKING"
                        query="base:address == '${door lock}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKED"
                        query="base:address == '${door lock}'" />
                  </or>
               </if>
               <if var="${locked or unlocked}" equals="locked">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="UNLOCKED" new="LOCKED"
                        query="base:address == '${door lock}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKING" new="LOCKED"
                        query="base:address == '${door lock}'" />
                  </or>
               </if>
            </or>
         </conditions>
         <actions>
            <send to="${scene}" method="scene:Fire" />
         </actions>
         <selectors>
            <selector name="door lock" type="device" query="base:caps contains 'doorlock'" />
            <selector name="locked or unlocked" type="constant">
               <options>
                  <option label="locked" value="locked" />
                  <option label="unlocked" value="unlocked" />
               </options>
            </selector>
            <selector name="scene" type="scene" />
         </selectors>
      </template>

	  <template id="0fe147" keywords="waterheater" tags="waterheater,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Hot Water Available"
         description="Notify me when hot water is available."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Notifications" />
            <category name="Water" />
         </categories>
         <description>When ${waterheater} has ${level}, then send ${person} a message via ${method}.</description>
         <conditions>
	          <attribute-value-change attribute="waterheater:hotwaterlevel" new="${level}" query="base:address == '${waterheater}'" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.0fe147.hot.water.available">
               <parameters>
                  <parameter name="waterheater">
                     <attribute-value address="${waterheater}" attribute="dev:name" />
                  </parameter>
                  <parameter name="level">
                     <attribute-value address="${waterheater}" attribute="waterheater:hotwaterlevel" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="waterheater" query="base:caps contains 'waterheater'" />
            <selector type="constant" name="level">
               <options>
                  <option label="Low" value="LOW" />
                  <option label="Medium" value="MEDIUM" />
                  <option label="High" value="HIGH" />
               </options>
            </selector>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>


      <template id="a1a7c5" keywords="swit" tags="swit,note"
         added="2015-08-27T00:00:00" modified="2015-08-27T00:00:00"
         name="Device On For Too Long Notification"
         description="Notify me when a smart plug has been on for too long."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Lights &amp; Switches" />
            <category name="Notifications" />
         </categories>
         <description>When ${device} has been ${state} for ${duration}, then send ${person} a message via ${method}.</description>
         <conditions>
				<duration-trigger duration="${duration}" device-query="base:address == '${device}'" condition="swit:state == '${state}'" unit="minutes" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.a1a7c5.swit.on.too.long.notify">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${device}" attribute="dev:name" />
                  </parameter>
                  <parameter name="time">
                     <datetime-value type="datetime" />
                  </parameter>
                  <parameter name="state">
                  	<constant-value value="${state}" />
                  </parameter>
                  <parameter name="duration">
                  	<constant-value value="${duration}" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="device" query="base:caps contains 'swit'" multiple="true" />
            <selector type="constant" name="state" >
               <options>
               		<option label="On" value="ON" />
               		<option label="Off" value="OFF" />
               </options>
			</selector>
            <selector type="constant" name="duration">
               <options>
                  <option label="1 min" value="1" />
                  <option label="2 mins" value="2" />
                  <option label="3 mins" value="3" />
                  <option label="4 mins" value="4" />
                  <option label="5 mins" value="5" />
                  <option label="6 mins" value="6" />
                  <option label="7 mins" value="7" />
                  <option label="8 mins" value="8" />
                  <option label="9 mins" value="9" />
                  <option label="10 mins" value="10" />
                  <option label="15 mins" value="15" />
                  <option label="30 mins" value="30" />
                  <option label="45 mins" value="45" />
                  <option label="1 hour" value="60" />
                  <option label="2 hours" value="120" />
                  <option label="3 hours" value="180" />
                  <option label="4 hours" value="240" />
                  <option label="5 hours" value="300" />
                  <option label="6 hours" value="360" />
                  <option label="7 hours" value="420" />
                  <option label="8 hours" value="480" />
               </options>
            </selector>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>


      <template id="c117e7" keywords="leakh2o" tags="leakh2o,note"
         added="2015-08-27T00:00:00" modified="2015-08-27T00:00:00"
         name="Water Leak Detected; Shut Off Water"
         description="When a water leak has been detected, close the water shut-off valve and notify me."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Notifications" />
            <category name="Water" />
         </categories>
         <description>When ${leakh2o} reports a leak, then turn off ${valve}, then send ${person} a message via ${method}.</description>
         <conditions>
				<attribute-value-change attribute="leakh2o:state" query="base:address == '${leakh2o}'" new="LEAK" />
         </conditions>
         <actions>
				<device-query var="address" query="base:address == '${valve}' and valv:state != 'CLOSED'">
					<set-attribute to="${address}" name="valv:valvestate" value="CLOSED" />
				</device-query>
            <notify to="${person}" priority="${method}" key="rule.c117e7.stop.water.leak">
               <parameters>
                  <parameter name="leakh2o">
                     <attribute-value address="${leakh2o}" attribute="dev:name" />
                  </parameter>
                  <parameter name="valve">
                     <attribute-value address="${valve}" attribute="dev:name" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="leakh2o" query="base:caps contains 'leakh2o'" multiple="true" />
            <selector type="device" name="valve" query="base:caps contains 'valv'" multiple="true" />

            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="a9242b" keywords="mot" tags="mot,note"
         added="2015-09-30T00:00:00" modified="2015-09-30T00:00:00"
         name="Motion Detected"
         description="Notify me when a motion sensor detects movement."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Notifications" />
            <category name="Security Alarm" />
         </categories>
         <description>When motion detected by ${device}, then send ${person} a message via ${method}.</description>
         <conditions>
            <attribute-value-change attribute="mot:motion" query="base:address == '${device}'" new="DETECTED" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.a9242b.motion.detected">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${device}" attribute="dev:name" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="device" query="base:caps contains 'mot'" multiple="true" />
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

      <!-- Will need an update for being able to select all locks versus just a single lock -->
      <template id="23adbb" keywords="" tags=""
         added="2015-08-27T00:00:00" modified="2015-08-27T00:00:00"
         name="Control Lock via Security"
         description="When the alarm mode changes then lock or unlock a door."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Security Alarm" />
         </categories>
         <description>When the security alarm is set to ${mode}, then ${control} the ${lock}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'subsecurity' AND subs:available == true" />
         </satisfiable-if>
         <conditions>
            <or>
               <if var="${mode}" equals="OFF">
                  <query-change
                     device-query="base:address == 'SERV:subsecurity:${_placeId}' AND subs:available == true"
                     condition="subsecurity:alarmMode == '${mode}' AND subsecurity:alarmState == 'DISARMED'" />
               </if>
               <if var="${mode}" equals="ON">
                  <query-change
                     device-query="base:address == 'SERV:subsecurity:${_placeId}' AND subs:available == true"
                     condition="subsecurity:alarmMode == '${mode}' AND subsecurity:alarmState == 'ARMED'" />
               </if>
               <if var="${mode}" equals="PARTIAL">
                  <query-change
                     device-query="base:address == 'SERV:subsecurity:${_placeId}' AND subs:available == true"
                     condition="subsecurity:alarmMode == '${mode}' AND subsecurity:alarmState == 'ARMED'" />
               </if>
            </or>
         </conditions>
         <actions>
            <device-query var="address" query="base:address == '${lock}'">
               <set-attribute to="${address}" name="doorlock:lockstate" value="${control}" />
            </device-query>
         </actions>
         <selectors>
            <selector name="mode" type="constant">
               <options>
                  <option label="On"      value="ON" />
                  <option label="Off"     value="OFF" />
                  <option label="Partial" value="PARTIAL" />
               </options>
            </selector>
            <selector name="lock" type="device" query="base:caps contains 'doorlock'" />
            <selector name="control" type="constant">
               <options>
                  <option label="Lock"   value="LOCKED" />
                  <option label="Unlock" value="UNLOCKED" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="4b7308" keywords="leakh2o" tags="leakh2o,note"
         added="2015-08-27T00:00:00" modified="2015-08-27T00:00:00"
         name="Water Leak Detected"
         description="Notify me when a water leak has been detected."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Notifications" />
            <category name="Water" />
         </categories>
         <description>When ${leakh2o} reports a leak, then send ${person} a message via ${method}.</description>
         <conditions>
				<attribute-value-change attribute="leakh2o:state" query="base:address == '${leakh2o}'" new="LEAK" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.4b7308.water.leak.detected">
               <parameters>
                  <parameter name="leakh2o">
                     <attribute-value address="${leakh2o}" attribute="dev:name" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="leakh2o" query="base:caps contains 'leakh2o'" multiple="true" />

            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="eab545" keywords="secure" tags="note"
         added="2015-09-30T00:00:00" modified="2015-09-30T00:00:00"
         name="Notify on Alarm Changed"
         description="Notify me when the security alarm mode changes."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Notifications" />
            <category name="Security Alarm" />
         </categories>
         <description>When the security alarm is set to ${mode}, then send ${person} a message via ${method}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'subsecurity' AND subs:available == true" />
         </satisfiable-if>
         <conditions>
				<attribute-value-change attribute="subsecurity:alarmMode" new="${mode}" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.eab545.security.alarm">
               <parameters>
                  <parameter name="mode">
                     <constant-value value="${mode}" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
         <selector type="constant" name="mode">
               <options>
                  <option label="On" value="ON" />
                  <option label="Off" value="OFF" />
                  <option label="Partial" value="PARTIAL" />
               </options>
            </selector>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="b33f29" keywords="irrcont" tags="irrcont,note"
         added="2015-09-30T00:00:00" modified="2015-09-30T00:00:00"
         name="Irrigation Changed Locally"
         description="Notify me when an irrigation controller is turned on or off on the device."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Notifications" />
            <category name="Lawn &amp; Garden" />
         </categories>
         <description>When ${device} is turned on or off,  then send ${person} a message via ${method}.</description>
         <conditions>
	            <attribute-value-change attribute="irrcont:controllerState" query="base:address == '${device}'" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.b33f29.irrcont.changed">
               <parameters>
                  <parameter name="device">
                     <attribute-value address="${device}" attribute="dev:name" />
                  </parameter>
                  <parameter name="mode">
                     <attribute-value address="${device}" attribute="irrcont:controllerState" />
                  </parameter>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="device" query="base:caps contains 'irrcont'" multiple="true" />
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="61da3b" keywords="contact" tags="note, cont"
         added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
         name="Notify on Contact Sensor"
         description="Notify me when a contact sensor is changed between certain times of day."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Care" />
            <category name="Notifications" />
         </categories>
         <description>When ${contact} is ${state} then send ${person} a message via ${method}.</description>
         <conditions>
	         <attribute-value-change attribute="cont:contact" new="${state}" query="base:address == '${contact}'" />
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.61da3b.contact.changed.timerange">
               <parameters>
                  <parameter name="contact">
                     <attribute-value address="${contact}" attribute="dev:name" />
                  </parameter>
                  <parameter name="state">
                     <attribute-value address="${contact}" attribute="cont:contact" />
                  </parameter>
                  <parameter name="time">
                     <datetime-value type="datetime" />
                  </parameter>permission
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
               </parameters>
            </notify>
         </actions>
         <selectors>
            <selector type="device" name="contact" query="cont:contact is supported" />
			<selector type="constant" name="state">
				<options>
					<option label="Open" value="OPENED" />
					<option label="Closed" value="CLOSED" />
				</options>
			</selector>
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

	<template id="1e1f0d" keywords="mot" tags="mot,swit"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Motion Detected, Activate Switch"
         description="Turn a light on when something moves."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Lights &amp; Switches" />
         </categories>
         <description>When the ${motion} detects motion, then turn the ${switch} to ${state} ${for awhile}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'swit'" />
         </satisfiable-if>
		 <conditions>
            <attribute-value-change attribute="mot:motion" new="DETECTED" query="base:address == '${motion}'" />
         </conditions>
         <actions>
            <device-query var="address" query="base:address == '${switch}' and swit:state != '${state}'">
               <set-attribute to="${address}" name="swit:state" value="${state}" duration="${for awhile}" condition-query="base:address == '${motion}' AND mot:motion == 'NONE'"/>
            </device-query>
         </actions>
         <selectors>
            <selector type="device" name="motion" query="base:caps contains 'mot'" />
            <selector type="device" name="switch" query="base:caps contains 'swit'" />
            <selector type="constant" name="state">
            	<options>
            		<option label="On" value="ON" />
            		<option label="Off" value="OFF" />
            	</options>
            </selector>
            <selector type="constant" name="for awhile">
               <options>
                  <option label="and leave it"  value="0" />
                  <option label="for 30 secs"   value="30" />
                  <option label="for 1 min"     value="60" />
                  <option label="for 2 mins"    value="120" />
                  <option label="for 3 mins"    value="180" />
                  <option label="for 4 mins"    value="240" />
                  <option label="for 5 mins"    value="300" />
                  <option label="for 6 mins"    value="360" />
                  <option label="for 7 mins"    value="420" />
                  <option label="for 8 mins"    value="480" />
                  <option label="for 9 mins"    value="540" />
                  <option label="for 10 mins"   value="600" />
                  <option label="for 15 mins"   value="900" />
                  <option label="for 30 mins"   value="1800" />
                  <option label="for 45 mins"   value="2700" />
                  <option label="for 1 hour"    value="3600" />
                  <option label="for 2 hours"   value="7200" />
                  <option label="for 3 hours"   value="10800" />
                  <option label="for 4 hours"   value="14400" />
                  <option label="for 5 hours"   value="18000" />
                  <option label="for 6 hours"   value="21600" />
                  <option label="for 7 hours"   value="25200" />
                  <option label="for 8 hours"   value="28800" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="2ac31b" keywords="mot" tags="mot,swit"
                added="2019-10-11T15:02:00" modified="2020-04-15T22:02:00"
                name="Motion Detected, Change Dimmer"
                description="Turn on a dimmer to a predetermined value when something moves."
                premium="false">
         <populations>
            <population name="general"/>
            <population name="qa"/>
            <population name="beta"/>
         </populations>
         <categories>
            <category name="Lights &amp; Switches"/>
         </categories>
         <description>When the ${motion} detects motion, then turn the ${dimmer} to ${value}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'dim'"/>
         </satisfiable-if>
         <conditions>
            <attribute-value-change attribute="mot:motion" new="DETECTED" query="base:address == '${motion}'"/>
         </conditions>
         <actions>
            <device-query var="address" query="base:address == '${dimmer}' and swit:state != 'ON' and dim:brightness != '${value}'">
               <set-attribute to="${address}" name="dim:brightness" value="${value}"/>
            </device-query>
             <device-query var="address" query="base:address == '${dimmer}' and swit:state != 'ON' and dim:brightness == '${value}'">
                 <set-attribute to="${address}" name="swit:state" value="ON"/>
             </device-query>
         </actions>
         <selectors>
            <selector type="device" name="motion" query="base:caps contains 'mot'"/>
            <selector type="device" name="dimmer" query="base:caps contains 'dim'"/>
            <selector type="constant" name="value">
               <options>
                  <option label="10%" value="10" />
                  <option label="20%" value="20" />
                  <option label="30%" value="30" />
                  <option label="40%" value="40" />
                  <option label="50%" value="50" />
                  <option label="60%" value="60" />
                  <option label="70%" value="70" />
                  <option label="80%" value="80" />
                  <option label="90%" value="90" />
                  <option label="100%" value="100" />
               </options>
            </selector>
         </selectors>
      </template>

  	 <template id="5a5d3d" keywords="climate" tags="climate,note"
         added="2015-08-11T00:00:00" modified="2015-08-11T00:00:00"
         name="Don't Cool the Neighborhood"
         description="Notify me if my thermostat comes on and I have a door or window open."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Climate" />
            <category name="Notifications" />
         </categories>
         <description>When someone turns the ${thermostat} on and any door or window sensor is open send ${person} a message via ${method}.</description>
         <satisfiable-if>
            <satisfiable query="cont:contact is supported" />
        </satisfiable-if>	
         <conditions>
			<context-query
				query="cont:contact == 'OPENED'">
                       <query-change device-query="base:address == '${thermostat}'" condition="(base:caps contains 'therm' AND therm:hvacmode != 'OFF') OR (base:caps contains 'spaceheater' AND spaceheater:heatstate != 'OFF')" />
                </context-query>
         </conditions>
         <actions>
            <notify to="${person}" priority="${method}" key="rule.5a5d3d.therm.open">
               <parameters>
			      <parameter name="_ruleName">
                    <constant-value value="${_ruleName}" />
                  </parameter>
                   <parameter name="deviceName">
                    <attribute-value address="${thermostat}" attribute="dev:name" />
                  </parameter>   
               </parameters>
            </notify>
         </actions>
         <selectors>
         	<selector type="device" name="thermostat" query="base:caps contains 'therm' OR base:caps contains 'spaceheater'" />
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="a45e6b" keywords="doorlock" tags="doorlock,swit,note"
         added="2015-08-11T00:00:00" modified="2016-01-04T00:00:00"
         name="Welcome Home"
         description="When a lock is unlocked, turn the light on."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
         	<category name="Lights &amp; Switches" />
            <category name="Doors &amp; Locks" />
         </categories>
         <description>When ${door} is unlocked, turn ${switch} on.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'swit'" />
         </satisfiable-if>
         <conditions>
            <or>
               <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKING"
                  query="base:address == '${door}'" />
               <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKED"
                  query="base:address == '${door}'" />
            </or>
         </conditions>
         <actions>
               <set-attribute to="${switch}" name="swit:state" value="ON" />
         </actions>
         <selectors>
            <selector type="device" name="door" query="base:caps contains 'doorlock'" />
            <selector type="device" name="switch" query="base:caps contains 'swit'" />
         </selectors>
      </template>


<!-- =====================================================
  TEMPLATES FOR HARDCODED KEYFOB / PENDANT / BUTTON RULES
========================================================== -->

	<!-- ************************************************************************ -->
	<!--  Generation 2 Iris (CentraLite) KeyFob (buttons hexagon, square, diamond, circle) -->
	<!-- ************************************************************************ -->
	<template id="smartfob-arm-on" keywords="" tags=""
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Arm On with the Smart Fob"
			description="Set the security alarm to on using a button on the Smart Fob (Circle, Diamond, Square, or Hexagon)"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${smart fob}, set the alarm to On.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:ArmBypassed">
					<attribute name="mode" value="ON" />
				</send>
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fccbb'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Circle" value="circle" />
                  <option label="Diamond" value="diamond" />
                  <option label="Square" value="square" />
                  <option label="Hexagon" value="hexagon" />
               </options>
            </selector>
			</selectors>
	</template>

	<template id="smartfob-disarm" keywords="" tags=""
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Disarm with the Smart Fob"
			description="Set the security alarm to off using a button on the Smart Fob (Circle, Diamond, Square, or Hexagon)"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${smart fob}, set the alarm to Off.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:Disarm" />
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fccbb'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Circle" value="circle" />
                  <option label="Diamond" value="diamond" />
                  <option label="Square" value="square" />
                  <option label="Hexagon" value="hexagon" />
               </options>
            </selector>
			</selectors>
	</template>

	<template id="smartfob-arm-partial" keywords="" tags=""
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Arm Partial with the Smart Fob"
			description="Set the security alarm to partial using a button on the Smart Fob (Circle, Diamond, Square, or Hexagon)"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${smart fob}, set the alarm to Partial.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:ArmBypassed">
					<attribute name="mode" value="PARTIAL" />
				</send>
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fccbb'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Circle" value="circle" />
                  <option label="Diamond" value="diamond" />
                  <option label="Square" value="square" />
                  <option label="Hexagon" value="hexagon" />
               </options>
            </selector>
			</selectors>
	</template>

   <template id="smartfob-chime" keywords="" tags=""
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Chime with the Smart Fob"
			description="Play a chime on the hub using a button on the Smart Fob (Circle, Diamond, Square, or Hexagon)"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${smart fob}, play a chime on the hub.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<device-query var="address" query="base:caps contains 'hubchime'">
                <send to="${address}" method="hubchime:chime" />
            </device-query>
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fccbb'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Circle" value="circle" />
                  <option label="Diamond" value="diamond" />
                  <option label="Square" value="square" />
                  <option label="Hexagon" value="hexagon" />
               </options>
            </selector>
			</selectors>
	</template>


	<!-- ************************************************************************ -->
	<!--  Generation 3 Iris (CentraLite v2) KeyFob (buttons away, home, a, b) -->
	<!-- ************************************************************************ -->
	<template id="smartfobgen3-arm-on" keywords="" tags=""
			added="2017-08-12T08:19:23" modified="2017-08-12T08:19:23"
			name="Arm On with the Smart Fob"
			description="Set the security alarm to on using a button on the Smart Fob (Home, Away, A, or B)"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${smart fob}, set the alarm to On.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:ArmBypassed">
					<attribute name="mode" value="ON" />
				</send>
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fcccc'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
                  <option label="A" value="a" />
                  <option label="B" value="b" />
               </options>
            </selector>
			</selectors>
	</template>

	<template id="smartfobgen3-disarm" keywords="" tags=""
			added="2017-08-12T08:19:23" modified="2017-08-12T08:19:23"
			name="Disarm with the Smart Fob"
			description="Set the security alarm to off using a button on the Smart Fob (Home, Away, A, or B)"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${smart fob}, set the alarm to Off.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:Disarm" />
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fcccc'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
                  <option label="A" value="a" />
                  <option label="B" value="b" />
               </options>
            </selector>
			</selectors>
	</template>

	<template id="smartfobgen3-arm-partial" keywords="" tags=""
			added="2017-08-12T08:19:23" modified="2017-08-12T08:19:23"
			name="Arm Partial with the Smart Fob"
			description="Set the security alarm to partial using a button on the Smart Fob (Home, Away, A, or B)"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${smart fob}, set the alarm to Partial.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:ArmBypassed">
					<attribute name="mode" value="PARTIAL" />
				</send>
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fcccc'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
                  <option label="A" value="a" />
                  <option label="B" value="b" />
               </options>
            </selector>
			</selectors>
	</template>

   <template id="smartfobgen3-chime" keywords="" tags=""
			added="2017-08-12T08:19:23" modified="2017-08-12T08:19:23"
			name="Chime with the Smart Fob"
			description="Play a chime on the hub using a button on the Smart Fob (Home, Away, A, or B)"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${smart fob}, play a chime on the hub.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<device-query var="address" query="base:caps contains 'hubchime'">
                <send to="${address}" method="hubchime:chime" />
            </device-query>
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fcccc'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
                  <option label="A" value="a" />
                  <option label="B" value="b" />
               </options>
            </selector>
			</selectors>
	</template>


	<!-- ************************************************************************ -->
	<!--  Generation 1 Iris (AlertMe) KeyFob (buttons home, away) -->
	<!-- ************************************************************************ -->
	<template id="smartfobgen1-arm-on" keywords="" tags=""
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Arm On with the 1st Gen Key Fob"
			description="Set the security alarm to on using a button on the 1st Gen Key Fob"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${key fob}, set the alarm to On.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${key fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:ArmBypassed">
					<attribute name="mode" value="ON" />
				</send>
			</actions>
			<selectors>
				<selector type="device" name="key fob" query="dev:productId = '486390'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
               </options>
            </selector>
			</selectors>
	</template>

	<template id="smartfobgen1-disarm" keywords="" tags=""
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Disarm with the 1st Gen Key Fob"
			description="Set the security alarm to off using a button on the 1st Gen Key Fob"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${key fob}, set the alarm to Off.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${key fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:Disarm" />
			</actions>
			<selectors>
				<selector type="device" name="key fob" query="dev:productId = '486390'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
               </options>
            </selector>
			</selectors>
	</template>

	<template id="smartfobgen1-arm-partial" keywords="" tags=""
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Arm Partial with the 1st Gen Key Fob"
			description="Set the security alarm to partial using a button on the 1st Gen Key Fob"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${key fob}, set the alarm to Partial.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${key fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:ArmBypassed">
					<attribute name="mode" value="PARTIAL" />
				</send>
			</actions>
			<selectors>
				<selector type="device" name="key fob" query="dev:productId = '486390'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
               </options>
            </selector>
			</selectors>
	</template>

   <template id="smartfobgen1-chime" keywords="" tags=""
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Chime with the 1st Gen Key Fob"
			description="Play a chime on the hub using a button on the 1st Gen Key Fob"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${key fob}, play a chime on the hub.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${key fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<device-query var="address" query="base:caps contains 'hubchime'">
                <send to="${address}" method="hubchime:chime" />
            </device-query>
			</actions>
			<selectors>
				<selector type="device" name="key fob" query="dev:productId = '486390'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
               </options>
            </selector>
			</selectors>
	</template>


	<template id="pendant-panic" keywords="" tags=""
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Care Pendant Trigger"
			description="Press the button to trigger a Care Alarm on the Premium Plan and a Panic Alarm on the Basic Plan"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
				<category name="Care" />
			</categories>
			<description>Pressing ${care pendent}, will trigger a Care Alarm on the Premium Plan and a Panic Alarm on the Basic Plan.</description>
			<conditions>
				<attribute-value-change attribute="but:state" query="base:address == '${care pendent}'"  new="PRESSED" />
			</conditions>
			<actions>
				<device-query var="address" query="base:address == 'SERV:subcare:${_placeId}' and subs:available == true">
					<send to="SERV:subcare:${_placeId}" method="subcare:Panic" />
				</device-query>
				<device-query var="address" query="base:address == 'SERV:subcare:${_placeId}' and subs:available == false">
					<send to="SERV:subsecurity:${_placeId}" method="subsecurity:Panic" />
				</device-query>
			</actions>
			<selectors>
				<selector type="device" name="care pendent" query="dev:productId = '2c982d' OR dev:productId = 'f93033' OR dev:model='KeyFob1Button'" />
			</selectors>
	</template>

	<template id="button-panic" keywords="cont" tags="cont,note"
         added="2015-10-05T00:00:00" modified="2015-10-05T00:00:00"
         name="Smart Panic Button"
         description="Use the Smart Button to raise a panic alarm."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
         </categories>
         <description>When ${button} is pressed, raise a panic alarm.</description>
         <conditions>
				<attribute-value-change attribute="but:state" new="PRESSED" query="base:address == '${button}'"/>
         </conditions>
         <actions>
            <send to="SERV:subsecurity:${_placeId}" method="subsecurity:Panic" />
         </actions>
         <selectors>
            <selector type="device" name="button" query="base:caps contains 'but'" />
         </selectors>
      </template>`


<!-- =====================================================
  END TEMPLATES FOR HARDCODED KEYFOB / PENDANT / BUTTON RULES
========================================================== -->

	<template id="button-chime" keywords="" tags=""
         added="2015-10-05T00:00:00" modified="2015-10-05T00:00:00"
         name="Door Bell Button"
         description="Use the Smart Button as a doorbell."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
         </categories>
         <description>When ${button} is pressed, chime the hub.</description>
         <conditions>
		      <attribute-value-change attribute="but:state" query="base:address == '${button}'"  new="PRESSED" />
         </conditions>
         <actions>
			<device-query var="address" query="base:caps contains 'hubchime'">
                <send to="${address}" method="hubchime:chime" />
            </device-query>
         </actions>
         <selectors>
            <selector type="device" name="button" query="dev:productId = 'bca135' OR dev:productId = 'bbf1cf'" />
         </selectors>
      </template>



	<template id="01e7de" keywords="" tags=""
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Smartfob Panic Button"
			description="Raise a panic alarm with a button on the Smart Fob (Circle, Diamond, Square, or Hexagon)."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${smart fob}, raise a panic alarm.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:Panic" />
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fccbb'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Circle" value="circle" />
                  <option label="Diamond" value="diamond" />
                  <option label="Square" value="square" />
                  <option label="Hexagon" value="hexagon" />
               </options>
            </selector>
			</selectors>
	</template>


	<template id="01e7dd" keywords="" tags=""
			added="2017-08-12T08:19:23" modified="2017-08-12T08:19:23"
			name="Smartfob Panic Button"
			description="Raise a panic alarm with a button on the Smart Fob (Away, Home, A, or B)."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${smart fob}, raise a panic alarm.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:Panic" />
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fcccc'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Away" value="away" />
                  <option label="Home" value="home" />
                  <option label="A" value="a" />
                  <option label="B" value="b" />
               </options>
            </selector>
			</selectors>
	</template>


	<template id="c2dd38" keywords="" tags=""
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="1st Gen Key Fob Panic Button"
			description="Use a button on the 1st Gen Key Fob to raise a panic alarm"
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When the ${button} is pressed on ${key fob}, raise a panic alarm.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${key fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="SERV:subsecurity:${_placeId}" method="subsecurity:Panic" />
			</actions>
			<selectors>
				<selector type="device" name="key fob" query="dev:productId = '486390'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
               </options>
            </selector>
			</selectors>
	</template>


	<template id="53ebbf" keywords="button" tags="swit, but"
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Control Devices with a Smart Fob"
			description="Turn a device on or off by pressing a button on the Smart Fob (Circle, Diamond, Square, or Hexagon)."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When ${button} on ${smart fob} is pressed then toggle state of ${switch}.</description>
			<satisfiable-if>
				<satisfiable query="base:caps contains 'swit'" />
			</satisfiable-if>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<device-query var="address" query="base:address == '${switch}' and swit:state == 'ON'">
					<set-attribute to="${address}" name="swit:state" value="OFF" />
				</device-query>
				<device-query var="address" query="base:address == '${switch}' and swit:state != 'ON'">
					<set-attribute to="${address}" name="swit:state" value="ON" />
				</device-query>
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fccbb'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Circle" value="circle" />
                  <option label="Diamond" value="diamond" />
                  <option label="Square" value="square" />
                  <option label="Hexagon" value="hexagon" />
               </options>
            </selector>
				<selector type="device" name="switch" query="base:caps contains 'swit'" />
			</selectors>
		</template>

		<template id="53ebbb" keywords="button" tags="swit, but"
			added="2017-08-12T08:19:23" modified="2017-08-12T08:19:23"
			name="Control Devices with a Smart Fob"
			description="Turn a device on or off by pressing a button on the Smart Fob (Away, Home, A, or B)."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When ${button} on ${smart fob} is pressed then toggle state of ${switch}.</description>
			<satisfiable-if>
				<satisfiable query="base:caps contains 'swit'" />
			</satisfiable-if>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<device-query var="address" query="base:address == '${switch}' and swit:state == 'ON'">
					<set-attribute to="${address}" name="swit:state" value="OFF" />
				</device-query>
				<device-query var="address" query="base:address == '${switch}' and swit:state != 'ON'">
					<set-attribute to="${address}" name="swit:state" value="ON" />
				</device-query>
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fcccc'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Away" value="away" />
                  <option label="Home" value="home" />
                  <option label="A" value="a" />
                  <option label="B" value="b" />
               </options>
            </selector>
				<selector type="device" name="switch" query="base:caps contains 'swit'" />
			</selectors>
		</template>


		<template id="7d8qe4" keywords="button" tags="swit, but"
			added="2015-08-05T00:00:00" modified="2015-08-05T00:00:00"
			name="Control Devices with a 1st Gen KeyFob"
			description="Turn a device on or off by pressing a custom button."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
			</categories>
			<description>When ${key fob} ${button} is pressed then toggle state of ${switch}.</description>
			<satisfiable-if>
				<satisfiable query="base:caps contains 'swit'" />
			</satisfiable-if>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${key fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<device-query var="address" query="base:address == '${switch}' and swit:state == 'ON'">
					<set-attribute to="${address}" name="swit:state" value="OFF" />
				</device-query>
				<device-query var="address" query="base:address == '${switch}' and swit:state != 'ON'">
					<set-attribute to="${address}" name="swit:state" value="ON" />
				</device-query>
			</actions>
			<selectors>
				<selector type="device" name="key fob" query="dev:productId = '486390'" />
				<selector type="constant" name="button">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
               </options>
                </selector>
				<selector type="device" name="switch" query="base:caps contains 'swit'" />
			</selectors>
		</template>

<!-- ===============================================
  TEMPLATES WITH CAMERA
=============================================== -->


     <template id="084abd" keywords="camera" tags="camera,note"
         added="2015-10-02T00:00:00" modified="2015-10-02T00:00:00"
         name="Touch Button Surveillance"
         description="Press a button and start recording."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Cameras &amp; Sensors" />
         </categories>
         <description>
         	When ${button} is pressed, start record video from ${camera} for ${duration}.
         </description>
         <conditions>
			 <attribute-value-change attribute="but:state" query="base:address == '${button}'"  new="PRESSED" />
         </conditions>
         <actions>
               <send to="SERV:video:${_placeId}" method="video:StartRecording">
               		<attribute name="placeId" value="${_placeId}" />
               		<attribute name="accountId" value="${_accountId}" />
					<attribute name="cameraAddress" value="${camera}" />
					<attribute name="stream" value="false" />
					<attribute name="duration" value="${duration}" />
               </send>
         </actions>
         <selectors>
         	<selector type="device" name="camera" query="base:caps contains 'camera'" />
         	<selector type="device" name="button" query="base:caps contains 'but'" />
			<selector type="constant" name="duration">
				<options>
					<option label="30 seconds" value="30" />
					<option label="1 minute" value="60" />
					<option label="2 minutes" value="120" />
					<option label="5 minutes" value="300" />
					<option label="10 minutes" value="600" />
				</options>
			</selector>
         </selectors>
      </template>

     <template id="abb7d3" keywords="camera" tags="camera,note"
         added="2015-10-02T00:00:00" modified="2015-10-02T00:00:00"
         name="See Who Comes and Goes"
         description="Keep an eye on things by recording anytime a door is locked or unlocked."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Cameras &amp; Sensors" />
         </categories>
         <description>When ${doorlock} is ${state}, start record video from ${camera} for ${duration}.</description>
         <conditions>
            <or>
               <if var="${state}" equals="UNLOCKED">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKING"
                        query="base:address == '${doorlock}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKED"
                        query="base:address == '${doorlock}'" />
                  </or>
               </if>
               <if var="${state}" equals="LOCKED">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="UNLOCKED" new="LOCKED"
                        query="base:address == '${doorlock}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKING" new="LOCKED"
                        query="base:address == '${doorlock}'" />
                  </or>
               </if>
            </or>
         </conditions>
         <actions>
               <send to="SERV:video:${_placeId}" method="video:StartRecording">
               		<attribute name="placeId" value="${_placeId}" />
               		<attribute name="accountId" value="${_accountId}" />
					<attribute name="cameraAddress" value="${camera}" />
					<attribute name="stream" value="false" />
					<attribute name="duration" value="${duration}" />
               </send>
         </actions>
         <selectors>
         	<selector type="device" name="camera" query="base:caps contains 'camera'" />
         	<selector type="device" name="doorlock" query="base:caps contains 'doorlock'" />
			<selector type="constant" name="state">
				<options>
					<option label="Locked" value="LOCKED" />
					<option label="Unlocked" value="UNLOCKED" />
				</options>
			</selector>
			<selector type="constant" name="duration">
				<options>
					<option label="30 seconds" value="30" />
					<option label="1 minute" value="60" />
					<option label="2 minutes" value="120" />
					<option label="5 minutes" value="300" />
					<option label="10 minutes" value="600" />
				</options>
			</selector>
         </selectors>
      </template>

	<template id="05f8a5" keywords="camera" tags="camera,note"
         added="2015-10-02T00:00:00" modified="2015-10-02T00:00:00"
         name="Record Movement"
         description="Record movement for a specified time."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Cameras &amp; Sensors" />
         </categories>
         <description>When ${motion sensor} detects motion, start record video from ${camera} for ${duration}.</description>
         <conditions>
			 <attribute-value-change attribute="mot:motion" query="base:address == '${motion sensor}'"  new="DETECTED" />
         </conditions>
         <actions>
               <send to="SERV:video:${_placeId}" method="video:StartRecording">
               		<attribute name="placeId" value="${_placeId}" />
               		<attribute name="accountId" value="${_accountId}" />
					<attribute name="cameraAddress" value="${camera}" />
					<attribute name="stream" value="false" />
					<attribute name="duration" value="${duration}" />
               </send>
         </actions>
         <selectors>
         	<selector type="device" name="camera" query="base:caps contains 'camera'" />
         	<selector type="device" name="motion sensor" query="base:caps contains 'mot'" />
			<selector type="constant" name="duration">
				<options>
					<option label="30 seconds" value="30" />
					<option label="1 minute" value="60" />
					<option label="2 minutes" value="120" />
					<option label="5 minutes" value="300" />
					<option label="10 minutes" value="600" />
				</options>
			</selector>
         </selectors>
      </template>

      <template id="669619" keywords="camera" tags="camera,note"
         added="2015-10-02T00:00:00" modified="2017-05-23T00:00:00"
         name="What Happened During an Alarm"
         description="Record automatically when a security alarm is triggered."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Cameras &amp; Sensors" />
            <category name="Security Alarm" />
         </categories>
         <description>When a security alarm is triggered, start recording from ${camera} for ${duration}.</description>
         <satisfiable-if>
            <satisfiable-if query="base:caps contains 'subsecurity' AND subs:available == true" />
         </satisfiable-if>
         <conditions>
            <or>
               <received message="subsecurity:Alert" />
               <received message="incident:SecurityAlert" />
               <received message="incident:PanicAlert" />
            </or>
         </conditions>
         <actions>
            <if var="${camera}" not-equals="all">
               <send to="SERV:video:${_placeId}" method="video:StartRecording">
                  <attribute name="placeId" value="${_placeId}" />
                  <attribute name="accountId" value="${_accountId}" />
                  <attribute name="cameraAddress" value="${camera}" />
                  <attribute name="stream" value="false" />
                  <attribute name="duration" value="${duration}" />
               </send>
            </if>
            <if var="${camera}" equals="all">
               <device-query var="aCamera" query="base:caps contains 'camera'">
                  <send to="SERV:video:${_placeId}" method="video:StartRecording">
                     <attribute name="placeId" value="${_placeId}" />
                     <attribute name="accountId" value="${_accountId}" />
                     <attribute name="cameraAddress" value="${aCamera}" />
                     <attribute name="stream" value="false" />
                     <attribute name="duration" value="${duration}" />
                  </send>
               </device-query>
            </if>
         </actions>
         <selectors>
            <selector name="camera" type="device" query="base:caps contains 'camera'">
               <options>
                  <option label="all cameras" value="all" />
               </options>
            </selector>
            <selector name="duration" type="constant">
               <options>
                  <option label="30 seconds" value="30" />
                  <option label="1 minute" value="60" />
                  <option label="2 minutes" value="120" />
                  <option label="5 minutes" value="300" />
                  <option label="10 minutes" value="600" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="426783" keywords="" tags=""
         added="2015-12-07T00:00:00"
         modified="2016-01-04T00:00:00"
         name="Control a light when a contact sensor opens or closes."
         description="When a contact sensor opens or closes, then control a light."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Lights &amp; Switches" />
         </categories>
         <description>Turn ${on or off} ${light} ${for awhile} when ${contact} is ${opened or closed}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'swit'" />
         </satisfiable-if>
         <conditions>
            <attribute-value-change attribute="cont:contact" query="base:address == '${contact}'" new="${opened or closed}" />
         </conditions>
         <actions>
            <set-attribute
                to="${light}"
                name="swit:state"
                value="${on or off}"
                duration="${for awhile}"
                />
         </actions>
         <selectors>
            <selector type="device" name="light" query="base:caps contains 'swit'" />
            <selector type="device" name="contact" query="base:caps contains 'cont'" />
            <selector type="constant" name="on or off">
               <options>
                  <option label="on" value="ON" />
                  <option label="off" value="OFF" />
               </options>
            </selector>
            <selector type="constant" name="opened or closed">
               <options>
                  <option label="opened" value="OPENED" />
                  <option label="closed" value="CLOSED" />
               </options>
            </selector>
            <selector type="constant" name="for awhile">
               <options>
                  <option label="and leave it"  value="0" />
                  <option label="for 30 secs"   value="30" />
                  <option label="for 1 min"     value="60" />
                  <option label="for 2 mins"    value="120" />
                  <option label="for 3 mins"    value="180" />
                  <option label="for 4 mins"    value="240" />
                  <option label="for 5 mins"    value="300" />
                  <option label="for 6 mins"    value="360" />
                  <option label="for 7 mins"    value="420" />
                  <option label="for 8 mins"    value="480" />
                  <option label="for 9 mins"    value="540" />
                  <option label="for 10 mins"   value="600" />
                  <option label="for 15 mins"   value="900" />
                  <option label="for 30 mins"   value="1800" />
                  <option label="for 45 mins"   value="2700" />
                  <option label="for 1 hour"    value="3600" />
                  <option label="for 2 hours"   value="7200" />
                  <option label="for 3 hours"   value="10800" />
                  <option label="for 4 hours"   value="14400" />
                  <option label="for 5 hours"   value="18000" />
                  <option label="for 6 hours"   value="21600" />
                  <option label="for 7 hours"   value="25200" />
                  <option label="for 8 hours"   value="28800" />
               </options>
            </selector>
         </selectors>
      </template>

 	<template id="55b0ce" keywords="temp" tags="note, temp"
			added="2016-01-27T00:00:00" modified="2016-01-27T00:00:00"
			name="Monitor Room Temperature"
			description="Notify me when a device temperature goes above or below a certain level."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
            	<category name="Climate" />
            	<category name="Notifications" />
			</categories>
			<description>When ${device} temperature goes ${above or below} ${value}, then send ${person} a message via ${method}.</description>
			<conditions>
				<attribute-value-threshold attribute="temp:temperature" source="${device}" threshold="${value}" trigger-when="${above or below}" sensitivity="1" />
			</conditions>
			<actions>
				<notify to="${person}" priority="${method}" key="rule.55b0ce.home.temp.high">
	               <parameters>
	                  <parameter name="device">
	                     <attribute-value address="${device}" attribute="dev:name" />
	                  </parameter>
	                  <parameter name="current">
	                     <attribute-value address="${device}" attribute="temp:temperature" />
	                  </parameter>
	                  <parameter name="threshold">
	                     <constant-value value="${value}" />
	                  </parameter>
	                  <parameter name="triggerWhen">
							<constant-value value="${above or below}" />
					  </parameter>
				      <parameter name="_ruleName">
	                    <constant-value value="${_ruleName}" />
	                  </parameter>
	               </parameters>
	            </notify>
			</actions>
			<selectors>
				<selector type="device" name="device" query="base:caps contains 'temp'" />
	            <selector type="person" name="person" />
	            <selector type="constant" name="method">
	               <options>
	                  <option label="Push Notification" value="medium" />
	                  <option label="Email" value="low" />
	               </options>
	            </selector>
	            <selector type="constant" name="above or below">
	               <options>
	                  <option label="below" value="BELOW" />
	                  <option label="above" value="ABOVE" />
	               </options>
	            </selector>
	            <selector type="temperature" name="value" min="20" max="105" increment="1" />
			</selectors>
		</template>

      <template id="cd09b0" keywords="temp" tags="vent, temp"
			added="2016-01-27T00:00:00" modified="2016-01-27T00:00:00"
			name="Control Vents Based on Temperature"
			description="Open or close vents based on the temperature of other devices."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
            	<category name="Climate" />
			</categories>
			<description>When ${device} temperature goes ${above or below} ${value}, then set ${vent} to ${level}.</description>
			<conditions>
				<attribute-value-threshold attribute="temp:temperature" source="${device}" threshold="${value}" trigger-when="${above or below}" sensitivity="1" />
			</conditions>
			<actions>
				<device-query var="address" query="base:address == '${vent}' and vent:level != '${level}'">
	               <set-attribute to="${address}" name="vent:level" value="${level}" />
	            </device-query>
			</actions>
			<selectors>
				<selector type="device" name="device" query="base:caps contains 'temp'" />
	            <selector type="constant" name="above or below">
	               <options>
	                  <option label="below" value="BELOW" />
	                  <option label="above" value="ABOVE" />
	               </options>
	            </selector>
	            <selector type="device" name="vent" query="base:caps contains 'vent'" />
	            <selector type="constant" name="level">
	               <options>
	                  <option label="20" value="20" />
	                  <option label="40" value="40" />
	                  <option label="60" value="60" />
	                  <option label="80" value="80" />
	                  <option label="100" value="100" />
	               </options>
	            </selector>
	            <selector type="temperature" name="value" min="20" max="105" increment="1" />
			</selectors>
		</template>

		<template id="ad0873" keywords="temp" tags="swit, temp"
			added="2016-01-27T00:00:00" modified="2016-01-27T00:00:00"
			name="Control Lights &amp; Switches Based on Temperature"
			description="Turn lights and switches on or off based on the temperature of other devices."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
            	<category name="Climate" />
			</categories>
			<description>When ${device} temperature goes ${above or below} ${value}, then turn ${switch} ${on or off} ${for awhile}.</description>
			<conditions>
				<attribute-value-threshold attribute="temp:temperature" source="${device}" threshold="${value}" trigger-when="${above or below}" sensitivity="1" />
			</conditions>
			<actions>
				<device-query var="address" query="base:address == '${switch}' and swit:state != '${on or off}'">
					<set-attribute to="${address}" name="swit:state" value="${on or off}" duration="${for awhile}"/>
				</device-query>
			</actions>
			<selectors>
				<selector type="device" name="device" query="base:caps contains 'temp'" />
	            <selector type="constant" name="above or below">
	               <options>
	                  <option label="below" value="BELOW" />
	                  <option label="above" value="ABOVE" />
	               </options>
	            </selector>
	            <selector type="device" name="switch" query="base:caps contains 'swit'" />
	            <selector type="constant" name="on or off">
	               <options>
	                  <option label="on" value="ON" />
	                  <option label="off" value="OFF" />
	               </options>
	            </selector>
	            <selector type="constant" name="for awhile">
               <options>
                  <option label="and leave it"  value="0" />
                  <option label="for 30 secs"   value="30" />
                  <option label="for 1 min"     value="60" />
                  <option label="for 2 mins"    value="120" />
                  <option label="for 3 mins"    value="180" />
                  <option label="for 4 mins"    value="240" />
                  <option label="for 5 mins"    value="300" />
                  <option label="for 6 mins"    value="360" />
                  <option label="for 7 mins"    value="420" />
                  <option label="for 8 mins"    value="480" />
                  <option label="for 9 mins"    value="540" />
                  <option label="for 10 mins"   value="600" />
                  <option label="for 15 mins"   value="900" />
                  <option label="for 30 mins"   value="1800" />
                  <option label="for 45 mins"   value="2700" />
                  <option label="for 1 hour"    value="3600" />
                  <option label="for 2 hours"   value="7200" />
                  <option label="for 3 hours"   value="10800" />
                  <option label="for 4 hours"   value="14400" />
                  <option label="for 5 hours"   value="18000" />
                  <option label="for 6 hours"   value="21600" />
                  <option label="for 7 hours"   value="25200" />
                  <option label="for 8 hours"   value="28800" />
               </options>
            </selector>
	            <selector type="temperature" name="value" min="20" max="105" increment="1" />
			</selectors>
		</template>

		<template id="def48a" keywords="temp" tags="fan, temp"
			added="2016-01-27T00:00:00" modified="2016-01-27T00:00:00"
			name="Control Fans Based on Temperature"
			description="Turn on or off the fan to help your home reach a specific temperature."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
            	<category name="Climate" />
			</categories>
			<description>When ${device} temperature goes ${above or below} ${value}, then set ${fan} to ${speed} ${for awhile}.</description>
			<conditions>
				<attribute-value-threshold attribute="temp:temperature" source="${device}" threshold="${value}" trigger-when="${above or below}" sensitivity="1" />
			</conditions>
			<actions>
                <device-query var="address" query="base:address == '${fan}' and swit:state == 'ON'">
                    <set-attribute to="${address}" name="fan:speed" value="${speed}" duration="${for awhile}" /> 
                </device-query>
                <device-query var="address" query="base:address == '${fan}' and swit:state != 'ON'">
                    <set-attribute to="${address}" name="fan:speed" value="${speed}" /> 
                    <set-attribute to="${address}" name="swit:state" value="ON" duration="${for awhile}" />
                </device-query>
            </actions>
			<selectors>
				<selector type="device" name="device" query="base:caps contains 'temp'" />
	            <selector type="constant" name="above or below">
	               <options>
	                  <option label="below" value="BELOW" />
	                  <option label="above" value="ABOVE" />
	               </options>
	            </selector>
	            <selector type="device" name="fan" query="base:caps contains 'fan'" />
	            <!-- TODO - the choices of the speed should be from 0 to fan.maxspeed.  Currently it is hard coded to match the only fan driver ZW_Jasco_InWallFanController.driver  -->
	            <selector type="constant" name="speed">
				<options>
					<option label="Low" value="1" />
					<option label="Medium" value="2" />
					<option label="High" value="3" />
				</options>
			</selector>
	        <selector type="temperature" name="value" min="20" max="105" increment="1" />
			<selector type="constant" name="for awhile">
               <options>
                  <option label="and leave it"  value="0" />
                  <option label="for 30 secs"   value="30" />
                  <option label="for 1 min"     value="60" />
                  <option label="for 2 mins"    value="120" />
                  <option label="for 3 mins"    value="180" />
                  <option label="for 4 mins"    value="240" />
                  <option label="for 5 mins"    value="300" />
                  <option label="for 6 mins"    value="360" />
                  <option label="for 7 mins"    value="420" />
                  <option label="for 8 mins"    value="480" />
                  <option label="for 9 mins"    value="540" />
                  <option label="for 10 mins"   value="600" />
                  <option label="for 15 mins"   value="900" />
                  <option label="for 30 mins"   value="1800" />
                  <option label="for 45 mins"   value="2700" />
                  <option label="for 1 hour"    value="3600" />
                  <option label="for 2 hours"   value="7200" />
                  <option label="for 3 hours"   value="10800" />
                  <option label="for 4 hours"   value="14400" />
                  <option label="for 5 hours"   value="18000" />
                  <option label="for 6 hours"   value="21600" />
                  <option label="for 7 hours"   value="25200" />
                  <option label="for 8 hours"   value="28800" />
               </options>
            </selector>
            </selectors>
		</template>

		<template id="5e5800" keywords="poweruse" tags="poweruse,note"
         added="2016-01-27T00:00:00" modified="2016-01-27T00:00:00"
         name="Monitor Smart Plug Energy Usage"
         description="Notify me when smart plug energy usage goes above or below a certain level."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Energy" />
            <category name="Notifications" />
         </categories>
         <description>
         	When ${device} electricity usage goes ${above or below} ${value} watts, then send ${person} a message via ${method}.</description>
         <conditions>
         	<attribute-value-threshold attribute="pow:instantaneous" source="${device}" threshold="${value}" trigger-when="${above or below}" sensitivity-percent="10" />
         </conditions>
         <actions>
				<notify to="${person}" priority="${method}" key="rule.5e5800.is.device.working">
					<parameters>
						<parameter name="device">
							<attribute-value address="${device}" attribute="dev:name" />
						</parameter>
						<parameter name="value">
							<attribute-value address="${device}" attribute="pow:instantaneous" />
						</parameter>
						<parameter name="triggerWhen">
							<constant-value value="${above or below}" />
						</parameter>
						<parameter name="threshold">
							<constant-value value="${value}" />
						</parameter>
						<parameter name="_ruleName">
                            <constant-value value="${_ruleName}" />
                        </parameter>
					</parameters>
				</notify>
         </actions>
         <selectors>
         	<selector type="device" name="device" query="base:caps contains 'pow'" />
			<selector type="constant" name="above or below">
               <options>
                  <option label="below" value="BELOW" />
                  <option label="above" value="ABOVE" />
               </options>
            </selector>
			<selector type="min-max" name="value" min="20" max="1500" increment="10" />
            <selector type="person" name="person" />
            <selector type="constant" name="method">
               <options>
                  <option label="Push Notification" value="medium" />
                  <option label="Email" value="low" />
               </options>
            </selector>
         </selectors>
      </template>
      <template id="2ef6fa" keywords="cont" tags="cont,note"
         added="2016-02-01T00:00:00" modified="2016-02-01T00:00:00"
         name="Alarm on or partial with a Lock"
         description="Arm on or arm partial when a lock is locked."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Doors &amp; Locks" />
            <category name="Security Alarm" />
         </categories>
         <description>When ${device} is locked, arm ${on or partial} the security alarm.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'subsecurity' AND subs:available == true" />
         </satisfiable-if>
         <conditions>
            <context-query
            	satisfiable-if="base:address == 'SERV:subsecurity:${_placeId}' AND subs:available == true"
            	query="subsecurity:alarmState != 'ARMED'" >
               <or>
                  <attribute-value-change attribute="doorlock:lockstate" old="UNLOCKED" new="LOCKED"
                     query="base:address == '${device}'" />
                  <attribute-value-change attribute="doorlock:lockstate" old="LOCKING" new="LOCKED"
                     query="base:address == '${device}'" />
               </or>
            </context-query>
         </conditions>
         <actions>
            <send to="SERV:subsecurity:${_placeId}" method="subsecurity:ArmBypassed" >
            	<attribute name="mode" value="${on or partial}" />
            </send>
         </actions>
         <selectors>
            <selector type="device" name="device" query="base:caps contains 'doorlock'" />
            <selector type="constant" name="on or partial">
               <options>
                  <option label="on" value="ON" />
                  <option label="partial" value="PARTIAL" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="e13466" keywords="scene" tags="scene,note"
         added="2016-02-05T00:00:00" modified="2016-02-05T00:00:00"
         name="Run a Scene via the Security Alarm"
         description="Run a Scene when the security alarm mode changes."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Security Alarm" />
				<category name="Scene" />
         </categories>
         <description>When the security alarm is set to ${mode}, then run ${scene}.</description>
         <satisfiable-if>
            <satisfiable query="base:caps contains 'subsecurity' AND subs:available == true" />
         </satisfiable-if>
         <conditions>
            <attribute-value-change attribute="subsecurity:alarmMode" new="${mode}" query="base:caps contains 'subsecurity' AND subs:available == true" />
         </conditions>
         <actions>
            <send to="${scene}" method="scene:Fire" />
         </actions>
         <selectors>
            <selector type="constant" name="mode">
               <options>
                  <option label="on" value="ON" />
                  <option label="partial" value="PARTIAL" />
                  <option label="off" value="OFF" />
               </options>
            </selector>
            <selector type="scene" name="scene" />
         </selectors>
      </template>
      
      <template id="6ec06b" keywords="cont,camera" tags="cont,camera"
         added="2016-05-09T00:00:00" modified="2016-05-09T00:00:00"
         name="Record when a door opens"
         description="Record when a door, window, cabinet or drawer is opened"
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Cameras &amp; Sensors" />
         </categories>
         <description>When ${device} is opened, start record video from ${camera} for ${duration}.</description>
         <satisfiable-if>            
         </satisfiable-if>
         <conditions>
            <attribute-value-change attribute="cont:contact" query="base:address == '${device}'"  new="OPENED" />
         </conditions>
         <actions>
            <send to="SERV:video:${_placeId}" method="video:StartRecording">
               		<attribute name="placeId" value="${_placeId}" />
               		<attribute name="accountId" value="${_accountId}" />
					<attribute name="cameraAddress" value="${camera}" />
					<attribute name="stream" value="false" />
					<attribute name="duration" value="${duration}" />
               </send>
         </actions>
         <selectors>
            <selector type="device" name="camera" query="base:caps contains 'camera'" />
         	<selector type="device" name="device" query="base:caps contains 'cont'" />
         	<selector type="constant" name="duration">
				<options>
					<option label="30 seconds" value="30" />
					<option label="1 minute" value="60" />
					<option label="2 minutes" value="120" />
					<option label="5 minutes" value="300" />
					<option label="10 minutes" value="600" />
				</options>
			</selector>
         </selectors>
      </template>
      <template id="779f740" keywords="button,motdoor" tags="but,motdoor"
         added="2016-06-21T00:00:00" modified="2016-06-21T00:00:00"
         name="Open Garage Door with a Smart Button or Care Pendant"
         description="Open or close a garage door when a button is pressed."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
			<category name="Doors &amp; Locks" />
         </categories>
         <description>When ${button} is pressed, then ${control} ${garage door}.</description>
         <satisfiable-if>            
         </satisfiable-if>
         <conditions>
            <attribute-value-change attribute="but:state" new="PRESSED" query="base:address == '${button}'"/>
         </conditions>
         <actions>
            <if var="${control}" equals="OPEN">
               <set-attribute to="${garage door}" name="motdoor:doorstate" value="OPEN" />
            </if>
            <if var="${control}" equals="CLOSED">
               <set-attribute to="${garage door}" name="motdoor:doorstate" value="CLOSED" />
            </if>
            <if var="${control}" equals="toggle">
               <device-query var="address" query="base:address == '${garage door}' and (motdoor:doorstate == 'OPEN' or motdoor:doorstate == 'OPENING')">
                  <set-attribute to="${garage door}" name="motdoor:doorstate" value="CLOSED" />
               </device-query>
               <device-query var="address" query="base:address == '${garage door}' and (motdoor:doorstate == 'CLOSED' or motdoor:doorstate == 'CLOSING')">
                  <set-attribute to="${garage door}" name="motdoor:doorstate" value="OPEN" />
               </device-query>
            </if>
         </actions>
         <selectors>
            <selector type="device" name="button" query="but:state is supported" />
         	<selector type="device" name="garage door" query="base:caps contains 'motdoor'" />
            <selector type="constant" name="control">
               <options>
                  <option label="open" value="OPEN" />
                  <option label="close" value="CLOSED" />
                  <option label="toggle" value="toggle" />
               </options>
            </selector>
         </selectors>
      </template>
      
      
      <template id="0bb95a0" keywords="button,motdoor" tags="but,motdoor"
         added="2016-06-21T00:00:00" modified="2016-06-21T00:00:00"
         name="Open Garage Door with a Smart Fob"
         description="Open or close a garage door when a Smart Fob button is pressed (Circle, Diamond, Square, or Hexagon)."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
			<category name="Doors &amp; Locks" />
         </categories>
         <description>When ${button} is pressed on ${smart fob}, then ${control} ${garage door}.</description>
         <satisfiable-if>            
         </satisfiable-if>
         <conditions>
            <attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
         </conditions>
         <actions>
            <if var="${control}" equals="OPEN">
               <set-attribute to="${garage door}" name="motdoor:doorstate" value="OPEN" />
            </if>
            <if var="${control}" equals="CLOSED">
               <set-attribute to="${garage door}" name="motdoor:doorstate" value="CLOSED" />
            </if>
            <if var="${control}" equals="toggle">
               <device-query var="address" query="base:address == '${garage door}' and (motdoor:doorstate == 'OPEN' or motdoor:doorstate == 'OPENING')">
                  <set-attribute to="${garage door}" name="motdoor:doorstate" value="CLOSED" />
               </device-query>
               <device-query var="address" query="base:address == '${garage door}' and (motdoor:doorstate == 'CLOSED' or motdoor:doorstate == 'CLOSING')">
                  <set-attribute to="${garage door}" name="motdoor:doorstate" value="OPEN" />
               </device-query>
            </if>
         </actions>
         <selectors>
            <selector type="device" name="smart fob" query="dev:productId = '4fccbb'" />
         	<selector type="device" name="garage door" query="base:caps contains 'motdoor'" />
            <selector type="constant" name="control">
               <options>
                  <option label="open" value="OPEN" />
                  <option label="close" value="CLOSED" />
                  <option label="toggle" value="toggle" />
               </options>
            </selector>
            <selector type="constant" name="button">
               <options>
                  <option label="Circle" value="circle" />
                  <option label="Diamond" value="diamond" />
                  <option label="Square" value="square" />
                  <option label="Hexagon" value="hexagon" />
               </options>
            </selector>
         </selectors>
      </template>
      
      
      <template id="0bb95aa" keywords="button,motdoor" tags="but,motdoor"
         added="2017-08-12T08:19:23" modified="2017-08-12T08:19:23"
         name="Open Garage Door with a Smart Fob"
         description="Open or close a garage door when a Smart Fob button is pressed (Away, Home, A, or B)."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
			<category name="Doors &amp; Locks" />
         </categories>
         <description>When ${button} is pressed on ${smart fob}, then ${control} ${garage door}.</description>
         <satisfiable-if>            
         </satisfiable-if>
         <conditions>
            <attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
         </conditions>
         <actions>
            <if var="${control}" equals="OPEN">
               <set-attribute to="${garage door}" name="motdoor:doorstate" value="OPEN" />
            </if>
            <if var="${control}" equals="CLOSED">
               <set-attribute to="${garage door}" name="motdoor:doorstate" value="CLOSED" />
            </if>
            <if var="${control}" equals="toggle">
               <device-query var="address" query="base:address == '${garage door}' and (motdoor:doorstate == 'OPEN' or motdoor:doorstate == 'OPENING')">
                  <set-attribute to="${garage door}" name="motdoor:doorstate" value="CLOSED" />
               </device-query>
               <device-query var="address" query="base:address == '${garage door}' and (motdoor:doorstate == 'CLOSED' or motdoor:doorstate == 'CLOSING')">
                  <set-attribute to="${garage door}" name="motdoor:doorstate" value="OPEN" />
               </device-query>
            </if>
         </actions>
         <selectors>
            <selector type="device" name="smart fob" query="dev:productId = '4fcccc'" />
         	<selector type="device" name="garage door" query="base:caps contains 'motdoor'" />
            <selector type="constant" name="control">
               <options>
                  <option label="open" value="OPEN" />
                  <option label="close" value="CLOSED" />
                  <option label="toggle" value="toggle" />
               </options>
            </selector>
            <selector type="constant" name="button">
               <options>
                  <option label="Away" value="away" />
                  <option label="Home" value="home" />
                  <option label="A" value="a" />
                  <option label="B" value="b" />
               </options>
            </selector>
         </selectors>
      </template>
      
      <template id="3f32096" keywords="button,motdoor" tags="but,motdoor"
         added="2016-06-21T00:00:00" modified="2016-06-21T00:00:00"
         name="Open Garage Door with a 1st Gen Key Fob"
         description="Use the 1st Gen Key Fob to open or close a garage door when a button is pressed."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Buttons &amp; Fobs" />
			<category name="Doors &amp; Locks" />
         </categories>
         <description>When ${button} is pressed on ${key fob}, then ${control} ${garage door}.</description>
         <satisfiable-if>            
         </satisfiable-if>
         <conditions>
            <attribute-value-change attribute="but:state:${button}" query="base:address == '${key fob}'"  new="PRESSED" />
         </conditions>
         <actions>
            <if var="${control}" equals="OPEN">
               <set-attribute to="${garage door}" name="motdoor:doorstate" value="OPEN" />
            </if>
            <if var="${control}" equals="CLOSED">
               <set-attribute to="${garage door}" name="motdoor:doorstate" value="CLOSED" />
            </if>
            <if var="${control}" equals="toggle">
               <device-query var="address" query="base:address == '${garage door}' and (motdoor:doorstate == 'OPEN' or motdoor:doorstate == 'OPENING')">
                  <set-attribute to="${garage door}" name="motdoor:doorstate" value="CLOSED" />
               </device-query>
               <device-query var="address" query="base:address == '${garage door}' and (motdoor:doorstate == 'CLOSED' or motdoor:doorstate == 'CLOSING')">
                  <set-attribute to="${garage door}" name="motdoor:doorstate" value="OPEN" />
               </device-query>
            </if>
         </actions>
         <selectors>
            <selector type="device" name="key fob" query="dev:productId = '486390'" />
         	<selector type="device" name="garage door" query="base:caps contains 'motdoor'" />
            <selector type="constant" name="control">
               <options>
                  <option label="open" value="OPEN" />
                  <option label="close" value="CLOSED" />
                  <option label="toggle" value="toggle" />
               </options>
            </selector>
            <selector type="constant" name="button">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
               </options>
            </selector>
         </selectors>
      </template>
      
      <template id="31c90de" keywords="button" tags="scene, but"
			added="2015-11-13T00:00:00" modified="2015-11-13T00:00:00"
			name="Run a Scene using a Smart Fob"
			description="Run a scene when a Smart Fob button is pressed (Circle, Diamond, Square, or Hexagon)."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
				<category name="Scene" />
			</categories>
			<description>When ${button} is pressed on ${smart fob},  then run ${scene}.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="${scene}" method="scene:Fire" />
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fccbb'" />
				<selector type="scene" name="scene" />
				<selector type="constant" name="button">
	               <options>
	                  <option label="Circle" value="circle" />
	                  <option label="Diamond" value="diamond" />
	                  <option label="Square" value="square" />
	                  <option label="Hexagon" value="hexagon" />
	               </options>
	            </selector>
			</selectors>			
		</template>
		
		<template id="31c90dd" keywords="button" tags="scene, but"
			added="2017-08-12T08:19:23" modified="2017-08-12T08:19:23"
			name="Run a Scene using a Smart Fob"
			description="Run a scene when a Smart Fob button is pressed (Away, Home, A, or B)."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
				<category name="Scene" />
			</categories>
			<description>When ${button} is pressed on ${smart fob},  then run ${scene}.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${smart fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="${scene}" method="scene:Fire" />
			</actions>
			<selectors>
				<selector type="device" name="smart fob" query="dev:productId = '4fcccc'" />
				<selector type="scene" name="scene" />
				<selector type="constant" name="button">
	               <options>
	                  <option label="Away" value="away" />
                  	<option label="Home" value="home" />
                  	<option label="A" value="a" />
                  	<option label="B" value="b" />
	               </options>
	            </selector>
			</selectors>			
		</template>
		
		<template id="a00bcda" keywords="button" tags="scene, but"
			added="2015-11-13T00:00:00"
			modified="2015-11-13T00:00:00"
			name="Run a Scene using a 1st Gen Key Fob"
			description="Run a scene when a 1st Gen Key Fob button is pressed."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Buttons &amp; Fobs" />
				<category name="Scene" />
			</categories>
			<description>When ${button} is pressed on ${key fob},  then run ${scene}.</description>
			<conditions>
				<attribute-value-change attribute="but:state:${button}" query="base:address == '${key fob}'"  new="PRESSED" />
			</conditions>
			<actions>
				<send to="${scene}" method="scene:Fire" />
			</actions>
			<selectors>
				<selector type="device" name="key fob" query="dev:productId = '486390'" />
				<selector type="scene" name="scene" />
				<selector type="constant" name="button">
	               <options>
	                  <option label="Home" value="home" />
	                  <option label="Away" value="away" />
	               </options>
	            </selector>
			</selectors>			
		</template>
		
		<template id="ceab2fc" keywords="humid" tags="note,humid"
			added="2015-11-13T00:00:00"
			modified="2015-11-13T00:00:00"
			name="Monitor Humidity"
			description="Notify me when the humidity of a device goes above or below a certain level."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Notifications" />
				<category name="Climate" />
			</categories>
			<description>When ${device}'s humidity goes ${above or below} ${value}%, then send ${person} a message via ${method}.</description>
			<conditions>
				<attribute-value-threshold attribute="humid:humidity" source="${device}" threshold="${value}" trigger-when="${above or below}" sensitivity="5" />
			</conditions>
			<actions>
				<notify to="${person}" priority="${method}" key="rule.ceab2fc.home.humidity">
	               <parameters>
	                  <parameter name="device">
	                     <attribute-value address="${device}" attribute="dev:name" />
	                  </parameter>
	                  <parameter name="value">
	                     <attribute-value address="${device}" attribute="humid:humidity" />
	                  </parameter>
	                  <parameter name="threshold">
	                     <constant-value value="${value}" />
	                  </parameter>
	                  <parameter name="triggerWhen">
							<constant-value value="${above or below}" />
					  </parameter>
				      <parameter name="_ruleName">
	                    <constant-value value="${_ruleName}" />
	                  </parameter>
	               </parameters>
	            </notify>
			</actions>
			<selectors>
				<selector type="device" name="device" query="base:caps contains 'humid'" />
	            <selector type="person" name="person" />
	            <selector type="constant" name="method">
	               <options>
	                  <option label="Push Notification" value="medium" />
	                  <option label="Email" value="low" />
	               </options>
	            </selector>
	            <selector type="constant" name="above or below">
	               <options>
	                  <option label="below" value="BELOW" />
	                  <option label="above" value="ABOVE" />
	               </options>
	            </selector>
	            <selector type="min-max" name="value" min="5" max="95" increment="5" />
			</selectors>			
		</template>
		
		<template id="7a2154b" keywords="humid" tags="humid,swit"
			added="2017-05-04T00:00:00"
			modified="2017-05-04T00:00:00"
			name="Too Humid? Activate a Switch"
			description="When the humidity gets too high or too low, activate a switch."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Climate" />
				<category name="Lights &amp; Switches" />
			</categories>
			<description>When ${device}'s humidity goes ${above or below} ${value}%, then turn ${switch} ${on or off} ${for awhile}.</description>
			<conditions>
				<attribute-value-threshold
					attribute="humid:humidity"
					source="${device}"
					threshold="${value}"
					trigger-when="${above or below}"
					sensitivity="5" />
			</conditions>
			<actions>
				<set-attribute
					to="${switch}"
					name="swit:state"
					value="${on or off}"
					duration="${for awhile}" />
			</actions>
			<selectors>
				<selector name="device" type="device" query="base:caps contains 'humid'" />
				<selector name="above or below" type="constant">
					<options>
						<option label="below" value="BELOW" />
						<option label="above" value="ABOVE" />
					</options>
				</selector>
				<selector name="value" type="min-max" min="5" max="95" increment="5" />
				<selector name="switch" type="device" query="base:caps contains 'swit'" />
				<selector name="on or off" type="constant">
					<options>
						<option label="on" value="ON" />
						<option label="off" value="OFF" />
					</options>
				</selector>
				<selector name="for awhile" type="constant">
					<options>
						<option label="and leave it" value="0" />
						<option label="for 30 secs"  value="30" />
						<option label="for 1 min"    value="60" />
						<option label="for 2 mins"   value="120" />
						<option label="for 3 mins"   value="180" />
						<option label="for 4 mins"   value="240" />
						<option label="for 5 mins"   value="300" />
						<option label="for 6 mins"   value="360" />
						<option label="for 7 mins"   value="420" />
						<option label="for 8 mins"   value="480" />
						<option label="for 9 mins"   value="540" />
						<option label="for 10 mins"  value="600" />
						<option label="for 15 mins"  value="900" />
						<option label="for 30 mins"  value="1800" />
						<option label="for 45 mins"  value="2700" />
						<option label="for 1 hour"   value="3600" />
						<option label="for 2 hours"  value="7200" />
						<option label="for 3 hours"  value="10800" />
						<option label="for 4 hours"  value="14400" />
						<option label="for 5 hours"  value="18000" />
						<option label="for 6 hours"  value="21600" />
						<option label="for 7 hours"  value="25200" />
						<option label="for 8 hours"  value="28800" />
					</options>
				</selector>
			</selectors>
		</template>
		<template id="d2cd6c8" keywords="petdoor,pettoken" tags="petdoor,pettoken"
			added="2015-11-13T00:00:00"
			modified="2015-11-13T00:00:00"
			name="Lock the Pet Door"
			description="Lock the pet door when a pet enters or exits."
			premium="false">
			<populations>
				<population name="general" /> <population name="qa" /> <population name="beta" />
			</populations>
			<categories>
				<category name="Doors &amp; Locks" />
			</categories>
			<description>When a pet enters or leaves through ${pet door}, then lock it ${for awhile}.</description>
			<conditions>
	            <or>
		            <context-query
		            	satisfiable-if="base:address == '${pet door}'" 
		            	query="base:address == '${pet door}'">
		            	<attribute-value-change attribute="pettoken:lastAccessDirection:pt1" new="IN" query="base:address == '${pet door}'" />
		            </context-query>
		            <context-query
		            	satisfiable-if="base:address == '${pet door}'" 
		            	query="base:address == '${pet door}'">
		            	<attribute-value-change attribute="pettoken:lastAccessDirection:pt1" new="OUT" query="base:address == '${pet door}'"/>
		            </context-query>
		            <context-query
		            	satisfiable-if="base:address == '${pet door}'" 
		            	query="base:address == '${pet door}'">
		            	<attribute-value-change attribute="pettoken:lastAccessDirection:pt2" new="IN" query="base:address == '${pet door}'"/>
		            </context-query>
		            <context-query
		            	satisfiable-if="base:address == '${pet door}'" 
		            	query="base:address == '${pet door}'">
		            	<attribute-value-change attribute="pettoken:lastAccessDirection:pt2" new="OUT" query="base:address == '${pet door}'"/>
		            </context-query>
		            <context-query
		            	satisfiable-if="base:address == '${pet door}'" 
		            	query="base:address == '${pet door}'">
		            	<attribute-value-change attribute="pettoken:lastAccessDirection:pt3" new="IN" query="base:address == '${pet door}'"/>
		            </context-query>
		            <context-query
		            	satisfiable-if="base:address == '${pet door}'" 
		            	query="base:address == '${pet door}'">
		            	<attribute-value-change attribute="pettoken:lastAccessDirection:pt3" new="OUT" query="base:address == '${pet door}'"/>
		            </context-query>
		            <context-query
		            	satisfiable-if="base:address == '${pet door}'" 
		            	query="base:address == '${pet door}'">
		            	<attribute-value-change attribute="pettoken:lastAccessDirection:pt4" new="IN" query="base:address == '${pet door}'"/>
		            </context-query>
		            <context-query
		            	satisfiable-if="base:address == '${pet door}'" 
		            	query="base:address == '${pet door}'">
		            	<attribute-value-change attribute="pettoken:lastAccessDirection:pt4" new="OUT" query="base:address == '${pet door}'"/>
		            </context-query>
		            <context-query
		            	satisfiable-if="base:address == '${pet door}'" 
		            	query="base:address == '${pet door}'">
		            	<attribute-value-change attribute="pettoken:lastAccessDirection:pt5" new="IN" query="base:address == '${pet door}'"/>
		            </context-query>
		            <context-query
		            	satisfiable-if="base:address == '${pet door}'" 
		            	query="base:address == '${pet door}'">
		            	<attribute-value-change attribute="pettoken:lastAccessDirection:pt5" new="OUT" query="base:address == '${pet door}'"/>
		            </context-query>	            
	            </or>  
	         </conditions>
			<actions>
				<device-query var="address" query="base:address == '${pet door}'">
					<set-attribute to="${address}" name="petdoor:lockstate" value="LOCKED" duration="${for awhile}"/>
				</device-query>
			</actions>
			<selectors>
				<selector type="device" name="pet door" query="base:caps contains 'petdoor'" />				
				<selector type="constant" name="for awhile">
	               <options>
	                  <option label="and leave it"  value="0" />
	                  <option label="for 30 secs"   value="30" />
	                  <option label="for 1 min"     value="60" />
	                  <option label="for 2 mins"    value="120" />
	                  <option label="for 3 mins"    value="180" />
	                  <option label="for 4 mins"    value="240" />
	                  <option label="for 5 mins"    value="300" />
	                  <option label="for 6 mins"    value="360" />
	                  <option label="for 7 mins"    value="420" />
	                  <option label="for 8 mins"    value="480" />
	                  <option label="for 9 mins"    value="540" />
	                  <option label="for 10 mins"   value="600" />
	                  <option label="for 15 mins"   value="900" />
	                  <option label="for 30 mins"   value="1800" />
	                  <option label="for 45 mins"   value="2700" />
	                  <option label="for 1 hour"    value="3600" />
	                  <option label="for 2 hours"   value="7200" />
	                  <option label="for 3 hours"   value="10800" />
	                  <option label="for 4 hours"   value="14400" />
	                  <option label="for 5 hours"   value="18000" />
	                  <option label="for 6 hours"   value="21600" />
	                  <option label="for 7 hours"   value="25200" />
	                  <option label="for 8 hours"   value="28800" />
	               </options>
	            </selector>				
			</selectors>			
		</template>

      <template id="36e7e8" keywords="button,shade" tags="but,shade"
         added="2017-05-21T00:00:00" modified="2017-05-21T00:00:00"
         name="Control Blinds with a Custom Button"
         description="Control blinds and shades using a custom button."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Windows &amp; Blinds" />
            <category name="Buttons &amp; Fobs" />
         </categories>
         <description>When ${button} is pressed, then ${open or close} ${blind or shade}.</description>
         <conditions>
            <attribute-value-change attribute="but:state" new="PRESSED" query="base:address == '${button}'" />
         </conditions>
         <actions>
            <if var="${open or close}" equals="open">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="100" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToOpen" />
               </device-query>
            </if>
            <if var="${open or close}" equals="close">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="0" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToClosed" />
               </device-query>
            </if>
            <if var="${open or close}" equals="toggle">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade' AND shade:level &lt; 50">
                  <set-attribute to="${address}" name="shade:level" value="100" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade' AND shade:level &gt;= 50">
                  <set-attribute to="${address}" name="shade:level" value="0" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1' AND somfyv1:currentstate != 'OPEN'">
                  <send to="${address}" method="somfyv1:GoToOpen" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1' AND somfyv1:currentstate == 'OPEN'">
                  <send to="${address}" method="somfyv1:GoToClosed" />
               </device-query>
            </if>
         </actions>
         <selectors>
            <selector name="button" type="device" query="but:state is supported" />
            <selector name="blind or shade" type="device" query="base:caps contains 'shade' OR base:caps contains 'somfyv1'" />
            <selector name="open or close" type="constant">
               <options>
                  <option label="open"   value="open" />
                  <option label="close"  value="close" />
                  <option label="toggle" value="toggle" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="ed7648" keywords="button,shade" tags="but,shade"
         added="2017-05-21T00:00:00" modified="2017-05-21T00:00:00"
         name="Control Blinds with a V1 Key Fob"
         description="Control blinds and shades using a 1st Gen Key Fob."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Windows &amp; Blinds" />
            <category name="Buttons &amp; Fobs" />
         </categories>
         <description>When ${button} is pressed on ${1st gen key fob}, then ${open or close} ${blind or shade}.</description>
         <conditions>
            <attribute-value-change attribute="but:state:${button}" new="PRESSED" query="base:address == '${1st gen key fob}'" />
         </conditions>
         <actions>
            <if var="${open or close}" equals="open">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="100" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToOpen" />
               </device-query>
            </if>
            <if var="${open or close}" equals="close">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="0" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToClosed" />
               </device-query>
            </if>
            <if var="${open or close}" equals="toggle">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade' AND shade:level &lt; 50">
                  <set-attribute to="${address}" name="shade:level" value="100" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade' AND shade:level &gt;= 50">
                  <set-attribute to="${address}" name="shade:level" value="0" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1' AND somfyv1:currentstate != 'OPEN'">
                  <send to="${address}" method="somfyv1:GoToOpen" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1' AND somfyv1:currentstate == 'OPEN'">
                  <send to="${address}" method="somfyv1:GoToClosed" />
               </device-query>
            </if>
         </actions>
         <selectors>
            <selector name="button" type="constant">
               <options>
                  <option label="Home" value="home" />
                  <option label="Away" value="away" />
               </options>
            </selector>
            <selector name="1st gen key fob" type="device" query="dev:productId = '486390'" />
            <selector name="blind or shade" type="device" query="base:caps contains 'shade' OR base:caps contains 'somfyv1'" />
            <selector name="open or close" type="constant">
               <options>
                  <option label="open"   value="open" />
                  <option label="close"  value="close" />
                  <option label="toggle" value="toggle" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="4c8592" keywords="button,shade" tags="but,shade"
         added="2017-05-21T00:00:00" modified="2017-05-21T00:00:00"
         name="Control Blinds with a Smart Fob"
         description="Control blinds and shades using a Smart Fob button (Circle, Diamond, Square, or Hexagon)."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Windows &amp; Blinds" />
            <category name="Buttons &amp; Fobs" />
         </categories>
         <description>When ${button} is pressed on ${smart fob}, then ${open or close} ${blind or shade}.</description>
         <conditions>
            <attribute-value-change attribute="but:state:${button}" new="PRESSED" query="base:address == '${smart fob}'" />
         </conditions>
         <actions>
            <if var="${open or close}" equals="open">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="100" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToOpen" />
               </device-query>
            </if>
            <if var="${open or close}" equals="close">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="0" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToClosed" />
               </device-query>
            </if>
            <if var="${open or close}" equals="toggle">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade' AND shade:level &lt; 50">
                  <set-attribute to="${address}" name="shade:level" value="100" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade' AND shade:level &gt;= 50">
                  <set-attribute to="${address}" name="shade:level" value="0" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1' AND somfyv1:currentstate != 'OPEN'">
                  <send to="${address}" method="somfyv1:GoToOpen" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1' AND somfyv1:currentstate == 'OPEN'">
                  <send to="${address}" method="somfyv1:GoToClosed" />
               </device-query>
            </if>
         </actions>
         <selectors>
            <selector name="button" type="constant">
               <options>
                  <option label="Circle"  value="circle" />
                  <option label="Diamond" value="diamond" />
                  <option label="Square"  value="square" />
                  <option label="Hexagon" value="hexagon" />
               </options>
            </selector>
            <selector name="smart fob" type="device" query="dev:productId = '4fccbb'" />
            <selector name="blind or shade" type="device" query="base:caps contains 'shade' OR base:caps contains 'somfyv1'" />
            <selector name="open or close" type="constant">
               <options>
                  <option label="open"   value="open" />
                  <option label="close"  value="close" />
                  <option label="toggle" value="toggle" />
               </options>
            </selector>
         </selectors>
      </template>
      
      <template id="4c8599" keywords="button,shade" tags="but,shade"
         added="2017-08-12T08:19:23" modified="2017-08-12T08:19:23"
         name="Control Blinds with a Smart Fob"
         description="Control blinds and shades using a Smart Fob button (Away, Home, A, or B)."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Windows &amp; Blinds" />
            <category name="Buttons &amp; Fobs" />
         </categories>
         <description>When ${button} is pressed on ${smart fob}, then ${open or close} ${blind or shade}.</description>
         <conditions>
            <attribute-value-change attribute="but:state:${button}" new="PRESSED" query="base:address == '${smart fob}'" />
         </conditions>
         <actions>
            <if var="${open or close}" equals="open">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="100" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToOpen" />
               </device-query>
            </if>
            <if var="${open or close}" equals="close">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="0" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToClosed" />
               </device-query>
            </if>
            <if var="${open or close}" equals="toggle">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade' AND shade:level &lt; 50">
                  <set-attribute to="${address}" name="shade:level" value="100" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade' AND shade:level &gt;= 50">
                  <set-attribute to="${address}" name="shade:level" value="0" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1' AND somfyv1:currentstate != 'OPEN'">
                  <send to="${address}" method="somfyv1:GoToOpen" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1' AND somfyv1:currentstate == 'OPEN'">
                  <send to="${address}" method="somfyv1:GoToClosed" />
               </device-query>
            </if>
         </actions>
         <selectors>
            <selector name="button" type="constant">
               <options>
                  <option label="Away" value="away" />
                  <option label="Home" value="home" />
                  <option label="A" value="a" />
                  <option label="B" value="b" />
               </options>
            </selector>
            <selector name="smart fob" type="device" query="dev:productId = '4fcccc'" />
            <selector name="blind or shade" type="device" query="base:caps contains 'shade' OR base:caps contains 'somfyv1'" />
            <selector name="open or close" type="constant">
               <options>
                  <option label="open"   value="open" />
                  <option label="close"  value="close" />
                  <option label="toggle" value="toggle" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="55a92a" keywords="doorlock,shade" tags="doorlock,shade"
         added="2017-05-21T00:00:00" modified="2017-05-21T00:00:00"
         name="Control Blinds Based on Door Locks"
         description="When a door is locked or unlocked, open or close the blinds/shades."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Windows &amp; Blinds" />
            <category name="Doors &amp; Locks" />
         </categories>
         <description>When ${door lock} is ${locked or unlocked}, then set ${blind or shade} to ${open or close}.</description>
         <conditions>
            <or>
               <if var="${locked or unlocked}" equals="unlocked">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKING"
                        query="base:address == '${door lock}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKED" new="UNLOCKED"
                        query="base:address == '${door lock}'" />
                  </or>
               </if>
               <if var="${locked or unlocked}" equals="locked">
                  <or>
                     <attribute-value-change attribute="doorlock:lockstate" old="UNLOCKED" new="LOCKED"
                        query="base:address == '${door lock}'" />
                     <attribute-value-change attribute="doorlock:lockstate" old="LOCKING" new="LOCKED"
                        query="base:address == '${door lock}'" />
                  </or>
               </if>
            </or>
         </conditions>
         <actions>
            <if var="${open or close}" equals="open">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="100" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToOpen" />
               </device-query>
            </if>
            <if var="${open or close}" equals="close">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="0" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToClosed" />
               </device-query>
            </if>
         </actions>
         <selectors>
            <selector name="door lock" type="device" query="base:caps contains 'doorlock'" />
            <selector name="locked or unlocked" type="constant">
               <options>
                  <option label="locked"   value="locked" />
                  <option label="unlocked" value="unlocked" />
               </options>
            </selector>
            <selector name="blind or shade" type="device" query="base:caps contains 'shade' OR base:caps contains 'somfyv1'" />
            <selector name="open or close" type="constant">
               <options>
                  <option label="open"  value="open" />
                  <option label="close" value="close" />
               </options>
            </selector>
         </selectors>
      </template>

      <template id="85b683" keywords="temp,shade" tags="temp,shade"
         added="2017-05-21T00:00:00" modified="2017-05-21T00:00:00"
         name="Control Blinds Based on Temperature"
         description="Open or close blinds and shades based on the temperature of other devices."
         premium="false">
         <populations>
            <population name="general" /> <population name="qa" /> <population name="beta" />
         </populations>
         <categories>
            <category name="Windows &amp; Blinds" />
            <category name="Climate" />
         </categories>
         <description>When ${device}'s temperature goes ${above or below} ${value}, then set ${blind or shade} to ${open or close}.</description>
         <conditions>
            <attribute-value-threshold attribute="temp:temperature" source="${device}" threshold="${value}"
               trigger-when="${above or below}" sensitivity="1" />
         </conditions>
         <actions>
            <if var="${open or close}" equals="open">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="100" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToOpen" />
               </device-query>
            </if>
            <if var="${open or close}" equals="close">
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'shade'">
                  <set-attribute to="${address}" name="shade:level" value="0" />
               </device-query>
               <device-query var="address" query="base:address == '${blind or shade}' AND base:caps contains 'somfyv1'">
                  <send to="${address}" method="somfyv1:GoToClosed" />
               </device-query>
            </if>
         </actions>
         <selectors>
            <selector name="device" type="device" query="base:caps contains 'temp'" />
            <selector name="above or below" type="constant">
               <options>
                  <option label="above" value="ABOVE" />
                  <option label="below" value="BELOW" />
               </options>
            </selector>
            <selector name="value" type="temperature" min="20" max="105" increment="1" />
            <selector name="blind or shade" type="device" query="base:caps contains 'shade' OR base:caps contains 'somfyv1'" />
            <selector name="open or close" type="constant">
               <options>
                  <option label="open"  value="open" />
                  <option label="close" value="close" />
               </options>
            </selector>
         </selectors>
      </template>

   </templates>

</rule-catalog>

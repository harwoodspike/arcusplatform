/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for a Zooz Zen 26 In-Wall Switch
 *
 */

driver          "ZWZoozZen26Driver"
description     "Driver for a Zooz Zen26 In-Wall Switch"
version         "1.0"
protocol        "ZWAV"
deviceTypeHint  "Switch"
productId       "acd43b"
vendor          "Zooz"
model           "Zen26"

matcher         'ZWAV:Manufacturer': 0x027A, 'ZWAV:ProductType': 0xa000, 'ZWAV:ProductId': 0xa001


capabilities	DevicePower, Switch, Indicator

importCapability 'zwave/GenericZWaveSwitch'
importCapability 'zwave/GenericZWaveVersion'

// set DevicePower
// ---------------
DevicePower.source               DevicePower.SOURCE_LINE
DevicePower.linecapable          true
DevicePower.backupbatterycapable false

Indicator.enabled			true
Indicator.enableSupported	false

final int  POLLING_INTERVAL_SEC = 600

final byte SWITCH_ON		= 0xff
final byte SWITCH_OFF		= 0x00

final long DFLT_READBACK_DELAY = 5000		// 5 second delay before reading
final long DEFERRED_READ_DELAY_MSEC = 5000	// wait 5 seconds after Node Info to read level

// config definitions/constants
// ----------------------------
final byte CNFG_LED_PARAM_NO      = 0x03		// parameter number for 'LED' setting, used to switch when LED is On and Off
final byte CNFG_LED_SIZE          = 0x01		// size of 'LED' parameter field, in bytes
final byte CNFG_LED_NORMAL        = 0x00		// LED 'ON' when outlet is 'OFF' (default)
final byte CNFG_LED_INVERSE       = 0x01		// LED 'ON' when outlet is 'ON'

final byte CNFG_TOGGLE_PARAM_NO   = 0x04		// parameter number for 'Toggle' setting, used to invert operation if installed upside down
final byte CNFG_TOGGLE_SIZE       = 0x01		// size of 'Toggle' parameter field, in bytes
final byte CNFG_TOGGLE_NORMAL     = 0x00		// Top/Up is 'ON' (default)
final byte CNFG_TOGGLE_INVERT     = 0x01		// Top/Up is 'OFF'

final byte CNFG_RESET_PARAM_NO    = 0x00		// parameter number to reset configuration to factory default
final byte CNFG_RESET_SIZE        = 0x81		// size field (actually flags indicating: 0x80 = reset, 0x01 = ignore values, use factory settings
final byte CNFG_RESET_VALUE       = 0x00        // Not used by device
final int  OFFLINE_TIMEOUT_SECS   = 1800 		// 30 min

final String DEVICE_NAME = 'Zooz Zen 26 In-Wall Switch'


onAdded {
	vars.'CURRENT_NAME' = DEVICE_NAME
	log.debug "${DEVICE_NAME} added with Attributes {}", message.attributes

	// set default attribute values
	DevicePower.source                  DevicePower.SOURCE_LINE
	DevicePower.linecapable             true
	DevicePower.backupbatterycapable    false
	DevicePower.sourcechanged           ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())

	Switch.state                        Switch.STATE_OFF
	Switch.statechanged                 ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
	Switch.inverted                     false

	Indicator.enabled                   true
	Indicator.enableSupported           false		// user cannot change the Indicator.enabled attribute for this device
	Indicator.indicator                 Indicator.INDICATOR_ON
	Indicator.inverted                  false

	// reset the device configuration to factory defaults
	ZWave.configuration.set(CNFG_RESET_PARAM_NO, CNFG_RESET_SIZE, CNFG_RESET_VALUE)
}

onConnected {
	log.debug "${DEVICE_NAME} connected"

	vars.'MAX_READBACKS' = 10				// used by GenericZWaveSwitch to limit maximum read operations
	vars.'DFLT_READBACK_DELAY' = 1000		// used by GenericZWaveSwitch to determine delay between read retries (in mSec)

	// get configuration settings
	ZWave.configuration.get(CNFG_LED_PARAM_NO)
	ZWave.configuration.get(CNFG_TOGGLE_PARAM_NO)
	ZWave.setOfflineTimeout(OFFLINE_TIMEOUT_SECS)
	ZWave.poll(POLLING_INTERVAL_SEC, ZWave.switch_binary.get)
}


onDisconnected {
	log.debug "${DEVICE_NAME} disconnected"
}


onRemoved {
	log.debug "${DEVICE_NAME} removed"
}


////////////////////////////////////////////////////////////////////////////////
// Capability Support
////////////////////////////////////////////////////////////////////////////////

setAttributes('swit') {
	GenericZWaveSwitch.handleSwitchState(this, DEVICE_NAME, message)

	def attributes = message.attributes
	for(attribute in attributes) {
		switch(attribute.key) {
			case Switch.inverted:
				// only accept this if the Switch.inverted attribute is not null, indicating that it can be set
				if (null != Switch.inverted.get()) {
					// set the Switch Orientation configuration
					ZWave.configuration.set(CNFG_TOGGLE_PARAM_NO, CNFG_TOGGLE_SIZE, attribute.value ? CNFG_TOGGLE_INVERT : CNFG_TOGGLE_NORMAL)
					// get the current Switch Orientation configuration from the device (to verify the config was set)
					ZWave.configuration.get(CNFG_TOGGLE_PARAM_NO)
				} else {
					log.warn "Attempted to set Switch.inverted attribute on device that does not support it"
				}
				break
			default:
				break
		}
	}
}

setAttributes('indicator') {
	def attributes = message.attributes
	for(attribute in attributes) {
		switch(attribute.key) {
			case Indicator.inverted:
				// set the LED configuration
				ZWave.configuration.set(CNFG_LED_PARAM_NO, CNFG_LED_SIZE, attribute.value ? CNFG_LED_INVERSE : CNFG_LED_NORMAL)
				// get the current LED configuration from the device (to verify the config was set)
				ZWave.configuration.get(CNFG_LED_PARAM_NO)
				break

			case Indicator.enabled:
				// The indicator cannot be enabled/disabled, only inverted
				log.warn "Switch does not support enable/disable of Indicator"
				Indicator.enabled true
				break

			default:
				break
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
// Protocol Message Callbacks
////////////////////////////////////////////////////////////////////////////////

onZWaveMessage.switch_binary.report {
	GenericZWaveSwitch.handleBinarySwitchReport(this,DEVICE_NAME,message)
}

onZWaveMessage.configuration.report {
	log.debug "${DEVICE_NAME} reported configuration: {}", message
	byte param = message.command.get('param')
	byte level = message.command.get('level')
	byte val1 = message.command.get('val1')
	log.debug "param: {}, level: {}, val1: {}", param, level, val1

	if (CNFG_LED_PARAM_NO == param) {
		log.debug "LED Inverted: {}", val1
		if (0 == val1) {
			// set/save the inverted attribute of the LED indicator
			Indicator.inverted false
			// update the indicator attribute to match (or inverse of) the current state attribute
			Indicator.indicator ( (Switch.STATE_ON == Switch.state.get()) ? Indicator.INDICATOR_OFF : Indicator.INDICATOR_ON )
		} else {
			// set/save the inverted attribute of the LED indicator
			Indicator.inverted true
			// update the indicator attribute to match (or inverse of) the current state attribute
			Indicator.indicator ( (Switch.STATE_ON == Switch.state.get()) ? Indicator.INDICATOR_ON : Indicator.INDICATOR_OFF )
		}
	}

	if (CNFG_TOGGLE_PARAM_NO == param) {
		log.debug "Toggle Switch Inverted: {}", val1
		// set/save the inverted attribute of the switch
		Switch.inverted ((0 == val1) ? false : true)
	}
}


onZWaveNodeInfo {
	log.debug "${DEVICE_NAME} reported Node Info: {}, {}, {}, {}, {}", message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()
	GenericZWaveSwitch.scheduleDeferredReadLevel(this, DEFERRED_READ_DELAY_MSEC)
}


onZWaveMessage {
    log.debug "${DEVICE_NAME} received unhandled ZWave message {}", message
    return false;
}

// ZEN26 reports local changes via basic report
onZWaveMessage.basic.report {
    byte currState = message.command.get('value')
    log.trace "Basic Report: {}", currState
    GenericZWaveSwitch.handleSwitchState(this, DEVICE_NAME, currState)
}

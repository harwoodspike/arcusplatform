/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
driver         "IPCDGenericDimmer"
description    "Driver for emulated IPCD Dimmer"
version        "1.0"
protocol       "IPCD"
deviceTypeHint "Switch"
productId      "0c9a54"
vendor         "Generic"
model          "Dimmer"

matcher        'IPCD:vendor' : 'Generic', 'IPCD:model' : 'Dimmer'

capabilities   DevicePower, Dimmer, Switch


DevicePower.source                 DevicePower.SOURCE_LINE
DevicePower.linecapable            true
DevicePower.backupbatterycapable   false

///////////////// Constants ////////////////////////
def final ATTR_SWITCH = "generic.switch"
def final ATTR_LEVEL = "generic.brightness"
def final VALUE_CHANGES = "valueChanges"

///////////////// Driver Lifecycle ////////////////

onAdded {
   log.debug "IPCD Generic Dimmer Device Added."
   
   DevicePower.sourcechanged        ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
   
   Switch.state                     Switch.STATE_OFF
   Switch.statechanged              ((null != DeviceAdvanced.added.get()) ? DeviceAdvanced.added.get() : new Date())
}

onConnected {
   log.debug "IPCD Generic Dimmer Device Connected."
   Ipcd.Commands.getParameterValues("txnid", [ATTR_LEVEL, ATTR_SWITCH])
}

onDisconnected {
   log.debug "IPCD Generic Dimmer Device Disconnected."
}

onRemoved {
   Ipcd.Commands.factoryReset()
   log.debug "IPCD Generic Switch Device Removed."
}

/////////////// Capability Attribute Closures ///////////////////

setAttributes {
   log.debug "IPCD Generic Dimmer driver received set Attribute message " + message
   def attributes = message.attributes
   for (attribute in attributes) {
      switch(attribute.key) {
         case Switch.state:
            if (attribute.value == 'ON') {
               Ipcd.Commands.setParameterValues("txnid", [ (ATTR_SWITCH) : "on" ])
            } else { 
               Ipcd.Commands.setParameterValues("txnid", [ (ATTR_SWITCH) : "off" ])
            }
         break;
         case Dimmer.brightness:
         	level = normalizeBrightness(this, attribute.value)
         	Ipcd.Commands.setParameterValues("txnid", [ (ATTR_LEVEL) : level ])
         break;

         default:
            log.error "unrecognized attribute: " + attribute
      }
   }
}

static int normalizeBrightness (ctx, name, targetBrightness) {
   return normalizeBrightness(ctx, targetBrightness)
}

static int normalizeBrightness (ctx, targetBrightness) {
   // limit brightness from 0 to 100
   if (100 < targetBrightness) {
      ctx.log.info "Generic limiting requested Brightness of {} to max allowed of 100", targetBrightness
      targetBrightness = 100
   }
   if (0 > targetBrightness) {
      ctx.log.info "Generic limiting requested Brightness of {} to min allowed of 0", targetBrightness
      targetBrightness = 0
   }
   return targetBrightness
}

///////////////// Protocol Messages ///////////////////////////

onIpcdMessage.event {
   log.debug("Got event from IPCD Device " + message)
   def eventMap = message.mapify()
   if (eventMap.containsKey(VALUE_CHANGES)) {
      def valueChanges = eventMap[VALUE_CHANGES]
      for (valueChange in valueChanges) {
         if (valueChange["parameter"] == ATTR_SWITCH) {
            def prevState = Switch.state.get()
            Switch.state( valueChange["value"] == 'on' ? Switch.STATE_ON : Switch.STATE_OFF )
            if (Switch.state.get() != prevState) {
               Switch.statechanged( new Date())
            }
         } else if (valueChange["parameter"] == ATTR_LEVEL) {
            def prevState = Dimmer.brightness.get()
            Dimmer.brightness valueChange["value"]
            if (Dimmer.brightness.get() != prevState) {
               Switch.statechanged( new Date())
            }
         }
      }
   }
}

onIpcdMessage.response.getParameterValues("success") {
   log.debug("Got Response from IPCD Device " + message)
   def response = message.mapify()["response"]
   log.debug("Response contents from IPCD Device " + response)

   if (response.containsKey(ATTR_SWITCH)) {
      Switch.state( response[ATTR_LEVEL] == 'on' ? Switch.STATE_ON : Switch.STATE_OFF )
   } else if (response.containsKey(ATTR_LEVEL)) {
      Dimmer.brightness( response[ATTR_LEVEL])
   }
}

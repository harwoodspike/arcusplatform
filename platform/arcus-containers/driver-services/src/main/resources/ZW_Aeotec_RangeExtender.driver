/*
 * Copyright 2019 Arcus Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Driver for an Aeotec Range Extender
 * (JDH)
 *
 * TODOs:
 *  - Battery.get request does not appear to be sent by hub (not sure if this is an issue because the device is secure or not)
 *
 * ISSUES/NOTES:
 *  - http://z-wave-assets.s3-us-west-2.amazonaws.com/docs/286/Aeotec_Z-Wave_Range_Extender_6_Instruction_Manual.pdf
 *
 * FACTORY RESET: Press and hold the "Z-Wave" button for 20 seconds and then release it.
 *
 * PAIR:          Press the "Z-Wave" button once while hub in in "pairing" mode.
 * UNPAIR:        Press the "Z-Wave" button once while hub in in "unpairing" mode.
 *
 */
import groovy.transform.Field

driver          "ZWAeotecRangeExender"
description     "Driver for a Aeotec Range Extender"
version         "1.0"
protocol        "ZWAV"
deviceTypeHint  "rangeextender"
productId       "c6b3da"
vendor          "AEOTEC"
model           "ZW117"

// !!!! NOTE !!!!
// It appears a manufacturer code between 0x0080 and 0x00FF does not parse correctly and must be represented as
// a negative number (similar to codes greater than 0x7FFF)
matcher         'ZWAV:Manufacturer': 0x0086, 'ZWAV:ProductType': 0x0004, 'ZWAV:ProductId': 0x0025
matcher         'ZWAV:Manufacturer':   -122, 'ZWAV:ProductType': 0x0004, 'ZWAV:ProductId': 0x0025
matcher         'ZWAV:Manufacturer': 0x0086, 'ZWAV:ProductType': 0x0004, 'ZWAV:ProductId': 0x0075
matcher         'ZWAV:Manufacturer':   -122, 'ZWAV:ProductType': 0x0004, 'ZWAV:ProductId': 0x0075
matcher         'ZWAV:Manufacturer': 0x0086, 'ZWAV:ProductType': 0x0104, 'ZWAV:ProductId': 0x0075
matcher         'ZWAV:Manufacturer':   -122, 'ZWAV:ProductType': 0x0104, 'ZWAV:ProductId': 0x0075
matcher         'ZWAV:Manufacturer': 0x0086, 'ZWAV:ProductType': 0x0204, 'ZWAV:ProductId': 0x0075
matcher         'ZWAV:Manufacturer':   -122, 'ZWAV:ProductType': 0x0204, 'ZWAV:ProductId': 0x0075
matcher         'ZWAV:Manufacturer':  0x371, 'ZWAV:ProductType': 0x0104, 'ZWAV:ProductId': 0x00BD

capabilities    DevicePower



// set DevicePower
// ---------------
DevicePower.source                  DevicePower.SOURCE_LINE
DevicePower.linecapable             true
DevicePower.backupbatterycapable    false


def final int OFFLINE_TIMEOUT_SECS   = 3600               // 60 minutes

def final String DEVICE_NAME = "Aeotec Range Extender"


ZWave {
    poll reflex{
        after 20, MINUTES
        send manufacturer_specific.get
    }
}

////////////////////////////////////////////////////////////////////////////////
// Driver lifecycle callbacks
////////////////////////////////////////////////////////////////////////////////

onAdded {
	vars.'CURRENT_NAME' = DEVICE_NAME
	log.debug "{} added", DEVICE_NAME
}


onConnected {
	vars.'CURRENT_NAME' = DEVICE_NAME
	log.debug "{} connected", DEVICE_NAME

	// set recommended offline timeout interval
	ZWave.setOfflineTimeout( OFFLINE_TIMEOUT_SECS )
}

onDisconnected {
	log.debug "{} disconnected", DEVICE_NAME
}

onRemoved {
	log.debug "{} removed", DEVICE_NAME
}

onZWaveNodeInfo {
	log.debug "Node Info: {}, {}, {}, {}, {}", message.getNodeId(), message.getStatus(), message.getBasic(), message.getGeneric(), message.getSpecific()
}
